{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Overview.html","title":"\ud83d\udc4b Welcome to ATIDocs","text":"<p>ATIDocs is your developer-friendly, Doom One\u2013themed documentation hub \u2014 focused on everything from frontend frameworks to backend systems, DevOps, algorithms, patterns, and more.</p> <p>\ud83d\ude80 Whether you're:</p> <ul> <li>A frontend dev learning React or Vue,</li> <li>A backend engineer digging into APIs or databases,</li> <li>Or just browsing cool coding patterns...</li> </ul> <p>This is your place.</p>"},{"location":"Overview.html#keyboard-navigation","title":"\ud83d\udd79\ufe0f Keyboard Navigation","text":"<p>Navigate this site without touching your mouse:</p> <ul> <li>H / J / K / L \u2014 Move <code>left</code>/<code>down</code>/<code>up</code>/<code>right</code> like in Vim</li> <li>G <code>+</code> G \u2014 Jump to the <code>top</code> of the page</li> <li>Shift <code>+</code> G \u2014 Jump to the <code>bottom</code></li> <li>F \u2014 Activate <code>hint mode</code> to follow links instantly</li> </ul> <p>\u26a1 This experience is powered by vimium and browser extensions integrated into ATIDocs.</p>"},{"location":"Overview.html#sections","title":"\ud83d\udcda Sections","text":"<ul> <li>\ud83e\udde0 Frontend: JavaScript, React, TypeScript, Vue, Next.js &amp; more</li> <li>\u2699\ufe0f Backend: Node.js, Express, GraphQL, REST, Databases</li> <li>\ud83d\udd27 DevOps: Docker, CI/CD, Nginx</li> <li>\ud83e\uddea Testing: Jest, Vitest</li> <li>\ud83d\udcca Algorithms &amp; Patterns</li> <li>\u2702\ufe0f Snippets &amp; Notes</li> <li>\ud83d\udcbb Languages</li> </ul>"},{"location":"Overview.html#get-started","title":"\ud83d\udccc Get Started","text":"<p>Check out the Frontend Overview or jump into a topic from the sidebar.</p>"},{"location":"about.html","title":"\ud83d\ude4b About ATIDocs","text":"<ul> <li>ATIDocs is a curated and themed developer documentation project maintained by:   Mohamed Attia.</li> </ul>"},{"location":"about.html#why","title":"\u2728 Why?","text":"<p>In the sea of tutorials, docs, and blog posts, ATIDocs aims to be a:</p> <ul> <li>\ud83e\udded Structured guide</li> <li>\ud83c\udf17 Aesthetic experience</li> <li>\ud83d\udee0\ufe0f Tool for learning, reference, and sharing</li> </ul> <p>Inspired by the Doom One theme, powered by MkDocs Material, and built for developers who love clean docs.</p>"},{"location":"about.html#tech-stack","title":"\ud83d\udd27 Tech Stack","text":"<ul> <li>MkDocs + Material for MkDocs</li> <li>Python for build tooling</li> <li>GitHub Pages / static hosting</li> </ul>"},{"location":"about.html#clone-use-this-project","title":"\ud83d\udee0\ufe0f Clone &amp; Use This Project","text":"<p>This project is open source and publicly available \u2014 feel free to explore, learn, and reuse it for your own documentation needs!</p> <p>You can clone it from GitHub:</p> <pre><code>git clone https://github.com/Mohamedattiadev/AtiDocs.git\n</code></pre>"},{"location":"contact.html","title":"\ud83d\udcec Contact","text":"<ul> <li>Want to reach out, collaborate, or contribute?</li> </ul>"},{"location":"contact.html#community-discussions","title":"\ud83e\udde0 Community &amp; Discussions","text":"<ul> <li>Start a GitHub Discussion</li> </ul>"},{"location":"contact.html#issues-contributions","title":"\ud83d\udee0\ufe0f Issues &amp; Contributions","text":"<ul> <li>Open an Issue</li> <li>Submit a Pull Request</li> </ul>"},{"location":"contact.html#connect-with-me","title":"\ud83c\udf10 Connect with Me","text":"<ul> <li> GitHub</li> <li> X (Twitter)</li> <li> LinkedIn</li> <li> Instagram</li> </ul> <p>\ud83d\udcac Prefer email? Reach out via DM on LinkedIn or Twitter for contact info.</p>"},{"location":"algorithms/index.html","title":"\ud83e\udde0 Algorithms &amp; Data Structures Overview","text":"<p>Explore all the key algorithms and data structures covered in this documentation. This page serves as a high-level summary and navigator.</p>"},{"location":"algorithms/index.html#sorting-algorithms","title":"\ud83d\udcca Sorting Algorithms","text":"Algorithm Time (Best) Time (Worst) Space Stable In-Place Walkthrough Selection Sort O(n\u00b2) O(n\u00b2) O(1) \u274c No \u2705 Yes View Bubble Sort O(n) O(n\u00b2) O(1) \u2705 Yes \u2705 Yes View Counting Sort O(n + k) O(n + k) O(k) \u2705 Yes \u274c No View Radix Sort O(nk) O(nk) O(n+k) \u2705 Yes \u274c No View Merge Sort O(n log n) O(n log n) O(n) \u2705 Yes \u274c No View Quick Sort O(n log n) O(n\u00b2) O(log n) \u274c No \u2705 Yes View"},{"location":"algorithms/index.html#core-data-structures","title":"\ud83e\uddf1 Core Data Structures","text":"Structure Description Operations Walkthrough \ud83d\udd17 Linked List Linear collection of nodes connected via pointers Insert, Delete, Traverse View \ud83d\udcda Stack LIFO structure (Last-In-First-Out) Push, Pop, Peek View \ud83d\udcec Queue FIFO structure (First-In-First-Out) Enqueue, Dequeue View \ud83c\udf32 Trees Hierarchical structure (root, child nodes) Insert, Search, Traverse View #\ufe0f\u20e3 Hashing Key-value mapping using hash functions Insert, Search, Delete View \ud83c\udf10 Graphs Set of nodes connected by edges (directed/undirected) BFS, DFS, Shortest Path View"},{"location":"algorithms/index.html#coming-up-next","title":"\ud83d\udcda Coming Up Next","text":"<ul> <li>\ud83d\udee0\ufe0f Heap Sort</li> <li>\ud83d\udce6 Bucket Sort</li> <li>\ud83e\uddea Insertion Sort</li> <li>\ud83d\udd78\ufe0f Disjoint Set (Union-Find)</li> <li>\ud83e\udde0 Trie, AVL Tree, Red-Black Tree</li> </ul>"},{"location":"algorithms/linkedlists.html","title":"Linked List - Visual &amp; Code Guide","text":""},{"location":"algorithms/linkedlists.html#1-linked-list-creation","title":"1. Linked List Creation","text":""},{"location":"algorithms/linkedlists.html#11-structure-of-a-node","title":"1.1 Structure of a Node","text":"<ul> <li>A linked list is made of nodes.</li> <li>Each node stores:</li> <li>A value (<code>data</code>)</li> <li>A pointer to the next node (<code>next</code>)</li> </ul>"},{"location":"algorithms/linkedlists.html#12-creating-individual-nodes","title":"1.2 Creating Individual Nodes","text":"<ul> <li>Nodes are created with values: 5, 10, 15, 20</li> <li>Each new node points to the next node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 15 \u2192 20 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#13-linking-nodes","title":"1.3 Linking Nodes","text":"<ul> <li>Connect all nodes one after another.</li> <li>The final node points to <code>NULL</code>, which marks the end of the list.</li> </ul>"},{"location":"algorithms/linkedlists.html#14-final-structure","title":"1.4 Final Structure","text":"<p>5 \u2192 10 \u2192 15 \u2192 20 \u2192 NULL \u2705 Created Successfully</p>"},{"location":"algorithms/linkedlists.html#2-insertion-in-an-empty-linked-list","title":"2. Insertion in an Empty Linked List","text":"<ul> <li>Start with <code>head = nullptr</code></li> <li>Create a single node with value 10</li> <li>Make <code>head</code> point to this new node</li> </ul>"},{"location":"algorithms/linkedlists.html#3-linked-list-insertion-general","title":"3. Linked List Insertion (General)","text":""},{"location":"algorithms/linkedlists.html#31-initial-linked-list","title":"3.1 Initial Linked List","text":"<p>Start with: <code>10 \u2192 20 \u2192 30 \u2192 NULL</code> \u27a1\ufe0f 10 \u2192 20 \u2192 30 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#32-insert-at-the-beginning","title":"3.2 Insert at the Beginning","text":""},{"location":"algorithms/linkedlists.html#method-1-pass-by-value-incorrect","title":"Method 1: Pass by Value (Incorrect)","text":"<ul> <li>A new node 5 is created.</li> <li>It points to the old head.</li> <li>But since the original head is passed by value, the change does not persist.</li> </ul> <p>\u27a1\ufe0f No change in the list</p>"},{"location":"algorithms/linkedlists.html#method-2-pass-by-reference-correct","title":"Method 2: Pass by Reference (Correct \u2705)","text":"<ul> <li>A new node 5 is created.</li> <li>It points to the old head.</li> <li>The actual <code>head</code> is updated to this new node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 30 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#33-insert-at-the-end","title":"3.3 Insert at the End","text":"<ul> <li>Traverse the list to the last node.</li> <li>Create a new node 40.</li> <li>Link it to the last node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 30 \u2192 40 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#34-insert-in-the-middle-after-a-specific-node","title":"3.4 Insert in the Middle (After a Specific Node)","text":"<ul> <li>Traverse to the node 20.</li> <li>Create a new node 25.</li> <li>Insert it right after 20 by adjusting pointers.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 25 \u2192 30 \u2192 40 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#35-final-linked-list-after-insertion","title":"3.5 Final Linked List After Insertion","text":"<p>5 \u2192 10 \u2192 20 \u2192 25 \u2192 30 \u2192 40 \u2192 NULL \u2705 Updated Successfully</p>"},{"location":"algorithms/linkedlists.html#4-linked-list-deletion","title":"4. Linked List Deletion","text":""},{"location":"algorithms/linkedlists.html#41-initial-linked-list","title":"4.1 Initial Linked List","text":"<p>Create a list with: <code>10 \u2192 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</code> \u27a1\ufe0f 10 \u2192 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#42-delete-first-node","title":"4.2 Delete First Node","text":"<ul> <li>Remove the <code>head</code> node (10).</li> <li>Update <code>head</code> to point to the next node (0).</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#43-delete-last-node","title":"4.3 Delete Last Node","text":"<ul> <li>Traverse to the second-last node (300).</li> <li>Remove the last node (400).</li> <li>Set <code>300 \u2192 NULL</code>.</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 200 \u2192 300 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#44-delete-a-specific-node-eg-200","title":"4.4 Delete a Specific Node (e.g. 200)","text":"<ul> <li>Traverse the list to the node just before 200.</li> <li>Skip over 200 by adjusting the <code>next</code> pointer.</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 300 \u2192 NULL</p>"},{"location":"algorithms/linkedlists.html#45-delete-non-existent-node-eg-2200","title":"4.5 Delete Non-Existent Node (e.g. 2200)","text":"<ul> <li>Traverse the list.</li> <li>If value not found, print: <code>\"Value 2200 not found in the list.\"</code></li> </ul> <p>\u27a1\ufe0f List remains unchanged</p>"},{"location":"algorithms/linkedlists.html#46-final-linked-list-after-deletion","title":"4.6 Final Linked List After Deletion","text":"<p>0 \u2192 100 \u2192 300 \u2192 NULL \u2705 Updated Successfully</p>"},{"location":"algorithms/linkedlists.html#5-searching-in-linked-list","title":"5. Searching in Linked List","text":""},{"location":"algorithms/linkedlists.html#51-iterative-search","title":"5.1 Iterative Search","text":"<ul> <li>Loop through each node.</li> <li>Compare <code>data</code> with the target.</li> <li>If match is found, return <code>true</code>.</li> <li>Else, reach end and return <code>false</code>.</li> </ul>"},{"location":"algorithms/linkedlists.html#52-recursive-search","title":"5.2 Recursive Search","text":"<ul> <li>Base case: return <code>false</code> if <code>head == NULL</code></li> <li>If data matches, return <code>true</code></li> <li>Otherwise, recursively call with <code>head-&gt;next</code></li> </ul>"},{"location":"algorithms/linkedlists.html#6-full-c-code-all-operations","title":"6. Full C++ Code (All Operations)","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node *next;\n\n    Node(int value) {\n        data = value;\n        next = nullptr;\n    }\n};\n\nvoid print(Node *head) {\n    Node *temp = head;\n    while (temp) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" --&gt; \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; \"NULL\" &lt;&lt; endl;\n}\n\nvoid insertAtBeginning(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    newNode-&gt;next = head;\n    head = newNode;\n}\n\nvoid insertAtEnd(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    if (!head) {\n        head = newNode;\n        return;\n    }\n    Node *temp = head;\n    while (temp-&gt;next)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n}\n\nvoid insertAfter(Node *prevNode, int value) {\n    if (!prevNode) return;\n    Node *newNode = new Node(value);\n    newNode-&gt;next = prevNode-&gt;next;\n    prevNode-&gt;next = newNode;\n}\n\nvoid deleteSpecific(Node *&amp;head, int value) {\n    if (!head) return;\n\n    if (head-&gt;data == value) {\n        Node *toDelete = head;\n        head = head-&gt;next;\n        delete toDelete;\n        return;\n    }\n\n    Node *temp = head;\n    while (temp-&gt;next &amp;&amp; temp-&gt;next-&gt;data != value)\n        temp = temp-&gt;next;\n\n    if (!temp-&gt;next) {\n        cout &lt;&lt; \"Value \" &lt;&lt; value &lt;&lt; \" not found in the list.\" &lt;&lt; endl;\n        return;\n    }\n\n    Node *toDelete = temp-&gt;next;\n    temp-&gt;next = toDelete-&gt;next;\n    delete toDelete;\n}\n\nvoid deleteLast(Node *&amp;head) {\n    if (!head) return;\n    if (!head-&gt;next) {\n        delete head;\n        head = nullptr;\n        return;\n    }\n\n    Node *second_last = head;\n    while (second_last-&gt;next-&gt;next)\n        second_last = second_last-&gt;next;\n\n    delete second_last-&gt;next;\n    second_last-&gt;next = nullptr;\n}\n\nNode* append(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    if (!head) return newNode;\n\n    Node *temp = head;\n    while (temp-&gt;next)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n    return head;\n}\n\nbool searchIterative(Node *head, int key) {\n    Node *temp = head;\n    while (temp) {\n        if (temp-&gt;data == key)\n            return true;\n        temp = temp-&gt;next;\n    }\n    return false;\n}\n\nbool searchRecursive(Node *head, int key) {\n    if (!head) return false;\n    if (head-&gt;data == key) return true;\n    return searchRecursive(head-&gt;next, key);\n}\n\nint main() {\n    Node *head = new Node(10);\n    Node *second = new Node(20);\n    Node *third = new Node(30);\n    head-&gt;next = second;\n    second-&gt;next = third;\n\n    cout &lt;&lt; \"Original Linked List: \";\n    print(head);\n\n    insertAtBeginning(head, 5);\n    cout &lt;&lt; \"After Insertion at Beginning: \";\n    print(head);\n\n    insertAtEnd(head, 40);\n    cout &lt;&lt; \"After Insertion at End: \";\n    print(head);\n\n    insertAfter(second, 25);\n    cout &lt;&lt; \"After Insertion in Middle (After 20): \";\n    print(head);\n\n    deleteSpecific(head, 5);\n    cout &lt;&lt; \"After Deleting 5: \";\n    print(head);\n\n    deleteLast(head);\n    cout &lt;&lt; \"After Deleting Last Node: \";\n    print(head);\n\n    deleteSpecific(head, 25);\n    cout &lt;&lt; \"After Deleting 25: \";\n    print(head);\n\n    cout &lt;&lt; \"Search 30 (Iterative): \" &lt;&lt; (searchIterative(head, 30) ? \"Found\" : \"Not Found\") &lt;&lt; endl;\n    cout &lt;&lt; \"Search 100 (Recursive): \" &lt;&lt; (searchRecursive(head, 100) ? \"Found\" : \"Not Found\") &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/linkedlists.html#video","title":"Video:","text":"Sorting - algorithm"},{"location":"algorithms/sorting/index.html","title":"\ud83d\udd22 Sorting Algorithms Explained","text":"<p>Sorting algorithms are essential for arranging data in a specific order (usually ascending or descending) to enable efficient search, merging, and organization. This document covers six important sorting algorithms: Selection Sort, Bubble Sort, Counting Sort, Radix Sort, Merge Sort, and Quick Sort.</p>"},{"location":"algorithms/sorting/index.html#1-selection-sort","title":"1. Selection Sort","text":"<p>Logic:</p> <ul> <li>Repeatedly find the minimum element from the unsorted part and move it to the sorted part.</li> <li>Operates in-place with a simple two-loop structure.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(n\u00b2)</li> <li>Average: O(n\u00b2)</li> <li>Worst: O(n\u00b2)</li> </ul> <p>Space Complexity: O(1) Stable: \u274c</p>"},{"location":"algorithms/sorting/index.html#2-bubble-sort","title":"2. Bubble Sort","text":"<p>Logic:</p> <ul> <li>Repeatedly compare adjacent pairs and swap them if they\u2019re in the wrong order.</li> <li>Each iteration \"bubbles\" the largest unsorted element to the end.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(n) (when already sorted)</li> <li>Average: O(n\u00b2)</li> <li>Worst: O(n\u00b2)</li> </ul> <p>Space Complexity: O(1) Stable: \u2705</p>"},{"location":"algorithms/sorting/index.html#3-counting-sort","title":"3. Counting Sort","text":"<p>Logic:</p> <ul> <li>Count the frequency of each unique element.</li> <li>Use counts to determine correct positions in the sorted array.</li> <li>Only works for non-negative integers or discrete items with a limited range.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(n + k)</li> <li>Average: O(n + k)</li> <li>Worst: O(n + k) (k = range of input values)</li> </ul> <p>Space Complexity: O(k) Stable: \u2705</p>"},{"location":"algorithms/sorting/index.html#4-radix-sort","title":"4. Radix Sort","text":"<p>Logic:</p> <ul> <li>Processes digits from least to most significant.</li> <li>Uses a stable sort (like counting sort) on each digit position.</li> <li>Efficient for sorting numbers or fixed-length strings.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(nk)</li> <li>Average: O(nk)</li> <li>Worst: O(nk) (k = number of digits)</li> </ul> <p>Space Complexity: O(n + k) Stable: \u2705</p>"},{"location":"algorithms/sorting/index.html#5-merge-sort","title":"5. Merge Sort","text":"<p>Logic:</p> <ul> <li>Divide the array into halves.</li> <li>Recursively sort both halves.</li> <li>Merge the sorted halves into a single sorted array.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(n log n)</li> <li>Average: O(n log n)</li> <li>Worst: O(n log n)</li> </ul> <p>Space Complexity: O(n) Stable: \u2705</p>"},{"location":"algorithms/sorting/index.html#6-quick-sort","title":"6. Quick Sort","text":"<p>Logic:</p> <ul> <li>Select a pivot element.</li> <li>Partition the array so elements &lt; pivot go left, &gt; pivot go right.</li> <li>Recursively apply the same logic to subarrays.</li> </ul> <p>Time Complexity:</p> <ul> <li>Best: O(n log n)</li> <li>Average: O(n log n)</li> <li>Worst: O(n\u00b2) (when pivot is poorly chosen)</li> </ul> <p>Space Complexity: O(log n) (due to recursion) Stable: \u274c</p>"},{"location":"algorithms/sorting/index.html#summary-table","title":"Summary Table","text":"Algorithm Best Average Worst Space Stable Selection Sort O(n\u00b2) O(n\u00b2) O(n\u00b2) O(1) \u274c Bubble Sort O(n) O(n\u00b2) O(n\u00b2) O(1) \u2705 Counting Sort O(n + k) O(n + k) O(n + k) O(k) \u2705 Radix Sort O(nk) O(nk) O(nk) O(n + k) \u2705 Merge Sort O(n log n) O(n log n) O(n log n) O(n) \u2705 Quick Sort O(n log n) O(n log n) O(n\u00b2) O(log n) \u274c"},{"location":"algorithms/sorting/index.html#video","title":"Video:","text":"Sorting - algorithm"},{"location":"algorithms/sorting/bubble-sort.html","title":"Bubble Sort","text":""},{"location":"algorithms/sorting/bubble-sort.html#initial-array","title":"Initial Array:","text":"<p><code>[20, 12, 10, 15, 2]</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#pass-1","title":"Pass 1:","text":"<ul> <li>Compare adjacent elements and swap if needed.</li> <li>Largest element moves to the end.</li> </ul> <p>\u27a1\ufe0f <code>12, 20, 10, 15, 2</code> \u27a1\ufe0f <code>12, 10, 20, 15, 2</code> \u27a1\ufe0f <code>12, 10, 15, 20, 2</code> \u27a1\ufe0f <code>12, 10, 15, 2, 20</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#pass-2","title":"Pass 2:","text":"<ul> <li>The largest element <code>20</code> is sorted.</li> <li>Repeat for the rest.</li> </ul> <p>\u27a1\ufe0f <code>10, 12, 15, 2, 20</code> \u27a1\ufe0f No swap (12 &lt; 15) \u27a1\ufe0f <code>10, 12, 2, 15, 20</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#pass-3","title":"Pass 3:","text":"<ul> <li>Elements <code>15</code> and <code>20</code> are now sorted.</li> <li>Keep sorting the front.</li> </ul> <p>\u27a1\ufe0f No swap (10 &lt; 12) \u27a1\ufe0f <code>10, 2, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#pass-4","title":"Pass 4:","text":"<ul> <li>Final pass to place smallest two correctly.</li> </ul> <p>\u27a1\ufe0f <code>2, 10, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#final-sorted-array","title":"Final Sorted Array:","text":"<p><code>2, 10, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/bubble-sort.html#bubble-sort-c-implementation","title":"Bubble Sort - C++ Implementation","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid bubbleSort(int arr[], int n)\n{\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        for (int j = 0; j &lt; n - i - 1; j++)\n        {\n            if (arr[j] &gt; arr[j + 1])\n            {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\nvoid printArray(int arr[], int n)\n{\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n}\n\nint main()\n{\n    int arr[] = {65, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cout &lt;&lt; \"Original array: \";\n    printArray(arr, n);\n\n    bubbleSort(arr, n);\n\n    cout &lt;&lt; \"Sorted array: \";\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/sorting/counting-sort.html","title":"Linked List - Visual &amp; Code Guide","text":""},{"location":"algorithms/sorting/counting-sort.html#1-linked-list-creation","title":"1. Linked List Creation","text":""},{"location":"algorithms/sorting/counting-sort.html#11-structure-of-a-node","title":"1.1 Structure of a Node","text":"<ul> <li>A linked list is made of nodes.</li> <li>Each node stores:</li> <li>A value (<code>data</code>)</li> <li>A pointer to the next node (<code>next</code>)</li> </ul>"},{"location":"algorithms/sorting/counting-sort.html#12-creating-individual-nodes","title":"1.2 Creating Individual Nodes","text":"<ul> <li>Nodes are created with values: 5, 10, 15, 20</li> <li>Each new node points to the next node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 15 \u2192 20 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#13-linking-nodes","title":"1.3 Linking Nodes","text":"<ul> <li>Connect all nodes one after another.</li> <li>The final node points to <code>NULL</code>, which marks the end of the list.</li> </ul>"},{"location":"algorithms/sorting/counting-sort.html#14-final-structure","title":"1.4 Final Structure","text":"<p>5 \u2192 10 \u2192 15 \u2192 20 \u2192 NULL \u2705 Created Successfully</p>"},{"location":"algorithms/sorting/counting-sort.html#2-insertion-in-an-empty-linked-list","title":"2. Insertion in an Empty Linked List","text":"<ul> <li>Start with <code>head = nullptr</code></li> <li>Create a single node with value 10</li> <li>Make <code>head</code> point to this new node</li> </ul>"},{"location":"algorithms/sorting/counting-sort.html#3-linked-list-insertion-general","title":"3. Linked List Insertion (General)","text":""},{"location":"algorithms/sorting/counting-sort.html#31-initial-linked-list","title":"3.1 Initial Linked List","text":"<p>Start with: <code>10 \u2192 20 \u2192 30 \u2192 NULL</code> \u27a1\ufe0f 10 \u2192 20 \u2192 30 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#32-insert-at-the-beginning","title":"3.2 Insert at the Beginning","text":""},{"location":"algorithms/sorting/counting-sort.html#method-1-pass-by-value-incorrect","title":"Method 1: Pass by Value (Incorrect)","text":"<ul> <li>A new node 5 is created.</li> <li>It points to the old head.</li> <li>But since the original head is passed by value, the change does not persist.</li> </ul> <p>\u27a1\ufe0f No change in the list</p>"},{"location":"algorithms/sorting/counting-sort.html#method-2-pass-by-reference-correct","title":"Method 2: Pass by Reference (Correct \u2705)","text":"<ul> <li>A new node 5 is created.</li> <li>It points to the old head.</li> <li>The actual <code>head</code> is updated to this new node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 30 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#33-insert-at-the-end","title":"3.3 Insert at the End","text":"<ul> <li>Traverse the list to the last node.</li> <li>Create a new node 40.</li> <li>Link it to the last node.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 30 \u2192 40 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#34-insert-in-the-middle-after-a-specific-node","title":"3.4 Insert in the Middle (After a Specific Node)","text":"<ul> <li>Traverse to the node 20.</li> <li>Create a new node 25.</li> <li>Insert it right after 20 by adjusting pointers.</li> </ul> <p>\u27a1\ufe0f 5 \u2192 10 \u2192 20 \u2192 25 \u2192 30 \u2192 40 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#35-final-linked-list-after-insertion","title":"3.5 Final Linked List After Insertion","text":"<p>5 \u2192 10 \u2192 20 \u2192 25 \u2192 30 \u2192 40 \u2192 NULL \u2705 Updated Successfully</p>"},{"location":"algorithms/sorting/counting-sort.html#4-linked-list-deletion","title":"4. Linked List Deletion","text":""},{"location":"algorithms/sorting/counting-sort.html#41-initial-linked-list","title":"4.1 Initial Linked List","text":"<p>Create a list with: <code>10 \u2192 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</code> \u27a1\ufe0f 10 \u2192 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#42-delete-first-node","title":"4.2 Delete First Node","text":"<ul> <li>Remove the <code>head</code> node (10).</li> <li>Update <code>head</code> to point to the next node (0).</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 200 \u2192 300 \u2192 400 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#43-delete-last-node","title":"4.3 Delete Last Node","text":"<ul> <li>Traverse to the second-last node (300).</li> <li>Remove the last node (400).</li> <li>Set <code>300 \u2192 NULL</code>.</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 200 \u2192 300 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#44-delete-a-specific-node-eg-200","title":"4.4 Delete a Specific Node (e.g. 200)","text":"<ul> <li>Traverse the list to the node just before 200.</li> <li>Skip over 200 by adjusting the <code>next</code> pointer.</li> </ul> <p>\u27a1\ufe0f 0 \u2192 100 \u2192 300 \u2192 NULL</p>"},{"location":"algorithms/sorting/counting-sort.html#45-delete-non-existent-node-eg-2200","title":"4.5 Delete Non-Existent Node (e.g. 2200)","text":"<ul> <li>Traverse the list.</li> <li>If value not found, print: <code>\"Value 2200 not found in the list.\"</code></li> </ul> <p>\u27a1\ufe0f List remains unchanged</p>"},{"location":"algorithms/sorting/counting-sort.html#46-final-linked-list-after-deletion","title":"4.6 Final Linked List After Deletion","text":"<p>0 \u2192 100 \u2192 300 \u2192 NULL \u2705 Updated Successfully</p>"},{"location":"algorithms/sorting/counting-sort.html#5-searching-in-linked-list","title":"5. Searching in Linked List","text":""},{"location":"algorithms/sorting/counting-sort.html#51-iterative-search","title":"5.1 Iterative Search","text":"<ul> <li>Loop through each node.</li> <li>Compare <code>data</code> with the target.</li> <li>If match is found, return <code>true</code>.</li> <li>Else, reach end and return <code>false</code>.</li> </ul>"},{"location":"algorithms/sorting/counting-sort.html#52-recursive-search","title":"5.2 Recursive Search","text":"<ul> <li>Base case: return <code>false</code> if <code>head == NULL</code></li> <li>If data matches, return <code>true</code></li> <li>Otherwise, recursively call with <code>head-&gt;next</code></li> </ul>"},{"location":"algorithms/sorting/counting-sort.html#6-full-c-code-all-operations","title":"6. Full C++ Code (All Operations)","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node *next;\n\n    Node(int value) {\n        data = value;\n        next = nullptr;\n    }\n};\n\nvoid print(Node *head) {\n    Node *temp = head;\n    while (temp) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" --&gt; \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; \"NULL\" &lt;&lt; endl;\n}\n\nvoid insertAtBeginning(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    newNode-&gt;next = head;\n    head = newNode;\n}\n\nvoid insertAtEnd(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    if (!head) {\n        head = newNode;\n        return;\n    }\n    Node *temp = head;\n    while (temp-&gt;next)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n}\n\nvoid insertAfter(Node *prevNode, int value) {\n    if (!prevNode) return;\n    Node *newNode = new Node(value);\n    newNode-&gt;next = prevNode-&gt;next;\n    prevNode-&gt;next = newNode;\n}\n\nvoid deleteSpecific(Node *&amp;head, int value) {\n    if (!head) return;\n\n    if (head-&gt;data == value) {\n        Node *toDelete = head;\n        head = head-&gt;next;\n        delete toDelete;\n        return;\n    }\n\n    Node *temp = head;\n    while (temp-&gt;next &amp;&amp; temp-&gt;next-&gt;data != value)\n        temp = temp-&gt;next;\n\n    if (!temp-&gt;next) {\n        cout &lt;&lt; \"Value \" &lt;&lt; value &lt;&lt; \" not found in the list.\" &lt;&lt; endl;\n        return;\n    }\n\n    Node *toDelete = temp-&gt;next;\n    temp-&gt;next = toDelete-&gt;next;\n    delete toDelete;\n}\n\nvoid deleteLast(Node *&amp;head) {\n    if (!head) return;\n    if (!head-&gt;next) {\n        delete head;\n        head = nullptr;\n        return;\n    }\n\n    Node *second_last = head;\n    while (second_last-&gt;next-&gt;next)\n        second_last = second_last-&gt;next;\n\n    delete second_last-&gt;next;\n    second_last-&gt;next = nullptr;\n}\n\nNode* append(Node *&amp;head, int value) {\n    Node *newNode = new Node(value);\n    if (!head) return newNode;\n\n    Node *temp = head;\n    while (temp-&gt;next)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n    return head;\n}\n\nbool searchIterative(Node *head, int key) {\n    Node *temp = head;\n    while (temp) {\n        if (temp-&gt;data == key)\n            return true;\n        temp = temp-&gt;next;\n    }\n    return false;\n}\n\nbool searchRecursive(Node *head, int key) {\n    if (!head) return false;\n    if (head-&gt;data == key) return true;\n    return searchRecursive(head-&gt;next, key);\n}\n\nint main() {\n    Node *head = new Node(10);\n    Node *second = new Node(20);\n    Node *third = new Node(30);\n    head-&gt;next = second;\n    second-&gt;next = third;\n\n    cout &lt;&lt; \"Original Linked List: \";\n    print(head);\n\n    insertAtBeginning(head, 5);\n    cout &lt;&lt; \"After Insertion at Beginning: \";\n    print(head);\n\n    insertAtEnd(head, 40);\n    cout &lt;&lt; \"After Insertion at End: \";\n    print(head);\n\n    insertAfter(second, 25);\n    cout &lt;&lt; \"After Insertion in Middle (After 20): \";\n    print(head);\n\n    deleteSpecific(head, 5);\n    cout &lt;&lt; \"After Deleting 5: \";\n    print(head);\n\n    deleteLast(head);\n    cout &lt;&lt; \"After Deleting Last Node: \";\n    print(head);\n\n    deleteSpecific(head, 25);\n    cout &lt;&lt; \"After Deleting 25: \";\n    print(head);\n\n    cout &lt;&lt; \"Search 30 (Iterative): \" &lt;&lt; (searchIterative(head, 30) ? \"Found\" : \"Not Found\") &lt;&lt; endl;\n    cout &lt;&lt; \"Search 100 (Recursive): \" &lt;&lt; (searchRecursive(head, 100) ? \"Found\" : \"Not Found\") &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/sorting/merge-sort.html","title":"Merge Sort","text":""},{"location":"algorithms/sorting/merge-sort.html#initial-array","title":"Initial Array:","text":"<p><code>[38, 27, 43, 3, 9, 82, 10]</code></p>"},{"location":"algorithms/sorting/merge-sort.html#step-1-divide-the-array","title":"Step 1: Divide the Array","text":"Left Subarray Right Subarray <code>[38, 27, 43]</code> <code>[3, 9, 82, 10]</code> <p>\u27a1\ufe0f Continue dividing:</p> <p><code>[38] , [27] , [43] , [3] , [9] , [82] , [10]</code></p>"},{"location":"algorithms/sorting/merge-sort.html#step-2-merge-sort-step-by-step","title":"Step 2: Merge &amp; Sort Step-by-Step","text":"<ul> <li>Merge <code>[38]</code> and <code>[27]</code> \u2192 27, 38</li> <li>Merge with <code>[43]</code> \u2192 27, 38, 43</li> <li>Merge <code>[3]</code> and <code>[9]</code> \u2192 3, 9</li> <li>Merge with <code>[82]</code> \u2192 3, 9, 82</li> <li>Merge with <code>[10]</code> \u2192 3, 9, 10, 82</li> </ul> <p>\u27a1\ufe0f Now two sorted halves: 27, 38, 43 3, 9, 10, 82</p>"},{"location":"algorithms/sorting/merge-sort.html#step-3-final-merge","title":"Step 3: Final Merge","text":"<p>\u27a1\ufe0f Compare &amp; merge:</p> <p>3, 9, 10, 27, 38, 43, 82</p>"},{"location":"algorithms/sorting/merge-sort.html#final-sorted-array","title":"Final Sorted Array:","text":"<p><code>3, 9, 10, 27, 38, 43, 82</code></p> <p>Merge Sort completed successfully!</p>"},{"location":"algorithms/sorting/merge-sort.html#merge-sort-c-implementation","title":"Merge Sort - C++ Implementation","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid merge(int arr[], int low, int mid, int high) {\n    int temp[high - low + 1]; // Temporary array\n    int left = low;      // Starting index of left half of arr\n    int right = mid + 1; // Starting index of right half of arr\n    int k = 0;           // Index for temp array\n\n    // Storing elements in the temporary array in a sorted manner\n    while (left &lt;= mid &amp;&amp; right &lt;= high) {\n        if (arr[left] &lt;= arr[right]) {\n            temp[k] = arr[left];\n            left++;\n        } else {\n            temp[k] = arr[right];\n            right++;\n        }\n        k++;\n    }\n\n    // If elements on the left half are still left\n    while (left &lt;= mid) {\n        temp[k] = arr[left];\n        left++;\n        k++;\n    }\n\n    // If elements on the right half are still left\n    while (right &lt;= high) {\n        temp[k] = arr[right];\n        right++;\n        k++;\n    }\n\n    // Transferring all elements from temporary to arr\n    for (int i = low; i &lt;= high; i++) {\n        arr[i] = temp[i - low];\n    }\n}\n\nvoid mergeSort(int arr[], int low, int high) {\n    if (low &gt;= high) return;\n    int mid = (low + high) / 2;\n    mergeSort(arr, low, mid);     // Left half\n    mergeSort(arr, mid + 1, high); // Right half\n    merge(arr, low, mid, high);    // Merging sorted halves\n}\n\nint main() {\n    int arr[] = {38, 27, 43, 3, 9, 82, 10};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cout &lt;&lt; \"Before Sorting Array: \" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    mergeSort(arr, 0, n - 1);\n\n    cout &lt;&lt; \"After Sorting Array: \" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/sorting/quick-sort.html","title":"Quick Sort","text":""},{"location":"algorithms/sorting/quick-sort.html#initial-array","title":"Initial Array:","text":"<p><code>[50, 23, 9, 18, 61, 32]</code></p>"},{"location":"algorithms/sorting/quick-sort.html#step-1-choose-a-pivot-partition","title":"Step 1: Choose a Pivot &amp; Partition","text":"<ul> <li>Pivot = last element \u2192 32</li> <li>Rearrange such that:</li> <li>Elements less than pivot go to left</li> <li>Elements greater than pivot go to right</li> </ul> Before Partition 50 23 9 18 61 32 After Partition 23 9 18 32 61 50 <p>\u27a1\ufe0f Pivot 32 is now correctly placed.</p>"},{"location":"algorithms/sorting/quick-sort.html#step-2-quick-sort-left-subarray-23-9-18","title":"Step 2: Quick Sort Left Subarray <code>[23, 9, 18]</code>","text":"<ul> <li>Pivot = 18</li> </ul> Before Partition 23 9 18 After Partition 9 18 23 <p>\u27a1\ufe0f Pivot 18 placed at its correct position.</p>"},{"location":"algorithms/sorting/quick-sort.html#step-3-quick-sort-right-subarray-61-50","title":"Step 3: Quick Sort Right Subarray <code>[61, 50]</code>","text":"<ul> <li>Pivot = 50</li> </ul> Before Partition 61 50 After Partition 50 61 <p>\u27a1\ufe0f Pivot 50 placed correctly.</p>"},{"location":"algorithms/sorting/quick-sort.html#final-sorted-array","title":"Final Sorted Array:","text":"<p><code>9, 18, 23, 32, 50, 61</code></p> <p>Quick Sort completed successfully!</p>"},{"location":"algorithms/sorting/quick-sort.html#c-implementation-quick-sort","title":"C++ Implementation - Quick Sort","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[low];\n    int i = low;\n    int j = high;\n\n    while (i &lt; j) {\n        while (arr[i] &lt;= pivot &amp;&amp; i &lt;= high - 1) {\n            i++;\n        }\n\n        while (arr[j] &gt; pivot &amp;&amp; j &gt;= low + 1) {\n            j--;\n        }\n\n        if (i &lt; j) swap(arr[i], arr[j]);\n    }\n    swap(arr[low], arr[j]);\n    return j;\n}\n\nvoid qs(int arr[], int low, int high) {\n    if (low &lt; high) {\n        int pIndex = partition(arr, low, high);\n        qs(arr, low, pIndex - 1);\n        qs(arr, pIndex + 1, high);\n    }\n}\n\nvoid quickSort(int arr[], int n) {\n    qs(arr, 0, n - 1);\n}\n\nint main() {\n    int arr[] = {50, 23, 9, 18, 61, 32};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cout &lt;&lt; \"Before Using QuickSort: \" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    quickSort(arr, n);\n\n    cout &lt;&lt; \"After Using QuickSort: \" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/sorting/radix-sort.html","title":"Radix Sort","text":""},{"location":"algorithms/sorting/radix-sort.html#initial-array","title":"Initial Array:","text":"<p><code>[170, 45, 75, 90, 802, 24, 2, 66]</code></p>"},{"location":"algorithms/sorting/radix-sort.html#step-1-sort-by-1s-digit-least-significant-digit","title":"Step 1: Sort by 1s Digit (Least Significant Digit)","text":"Digit Bucket 0 170, 90 2 802, 2 4 24 5 45, 75 6 66 <p>\u27a1\ufe0f <code>170, 90, 802, 2, 24, 45, 75, 66</code></p>"},{"location":"algorithms/sorting/radix-sort.html#step-2-sort-by-10s-digit","title":"Step 2: Sort by 10s Digit","text":"Digit Bucket 0 802, 2 2 24 4 45 6 66 7 170, 75 9 90 <p>\u27a1\ufe0f <code>802, 2, 24, 45, 66, 170, 75, 90</code></p>"},{"location":"algorithms/sorting/radix-sort.html#step-3-sort-by-100s-digit-most-significant-digit","title":"Step 3: Sort by 100s Digit (Most Significant Digit)","text":"Digit Bucket 0 2, 24, 45, 66, 75, 90 1 170 8 802 <p>\u27a1\ufe0f <code>2, 24, 45, 66, 75, 90, 170, 802</code></p>"},{"location":"algorithms/sorting/radix-sort.html#final-sorted-array","title":"Final Sorted Array:","text":"<p><code>2, 24, 45, 66, 75, 90, 170, 802</code></p> <p>\ud83c\udf89 Radix Sort completed successfully!</p>"},{"location":"algorithms/sorting/radix-sort.html#radix-sort-c-implementation","title":"Radix Sort - C++ Implementation","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// Function to get the maximum value in the array\nint getMax(int arr[], int n)\n{\n    int maxVal = arr[0];\n    for (int i = 1; i &lt; n; i++)\n        if (arr[i] &gt; maxVal)\n            maxVal = arr[i];\n    return maxVal;\n}\n\n// Function to perform Radix Sort without Counting Sort, using normal arrays for buckets\nvoid radixSort(int arr[], int n)\n{\n    int maxVal = getMax(arr, n);\n    int buckets[10][n];  // Buckets for digits 0-9\n    int bucketCount[10] = {0};  // To track how many elements are in each bucket\n\n    for (int exp = 1; maxVal / exp &gt; 0; exp *= 10)\n    {\n        // Clear previous bucket contents\n        for (int i = 0; i &lt; 10; i++)\n            bucketCount[i] = 0;\n\n        // Place elements into buckets based on current digit\n        for (int i = 0; i &lt; n; i++)\n        {\n            int digit = (arr[i] / exp) % 10;\n            buckets[digit][bucketCount[digit]++] = arr[i];\n        }\n\n        // Gather elements back into the original array\n        int index = 0;\n        for (int i = 0; i &lt; 10; i++)\n        {\n            for (int j = 0; j &lt; bucketCount[i]; j++)\n                arr[index++] = buckets[i][j];\n        }\n    }\n}\n\nvoid printArray(int arr[], int n)\n{\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n}\n\nint main()\n{\n-    int arr[] = {170, 45, 75, 90, 802, 24, 2, 66};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cout &lt;&lt; \"Original array: \";\n    printArray(arr, n);\n\n    radixSort(arr, n);\n\n    cout &lt;&lt; \"Sorted array: \";\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithms/sorting/selection-sort.html","title":"Selection Sort","text":""},{"location":"algorithms/sorting/selection-sort.html#initial-array","title":"Initial Array:","text":"<p><code>[20, 12, 10, 15, 2]</code></p>"},{"location":"algorithms/sorting/selection-sort.html#pass-1","title":"Pass 1:","text":"<ul> <li>Find the smallest element \u2192 <code>2</code> (index <code>4</code>)</li> <li>Swap with the first element <code>20</code></li> </ul> <p>\u27a1\ufe0f <code>2, 12, 10, 15, 20</code></p>"},{"location":"algorithms/sorting/selection-sort.html#pass-2","title":"Pass 2:","text":"<ul> <li>Find the smallest element \u2192 <code>10</code> (index <code>2</code>)</li> <li>Swap with <code>12</code></li> </ul> <p>\u27a1\ufe0f <code>2, 10, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/selection-sort.html#pass-3","title":"Pass 3:","text":"<ul> <li>Element <code>12</code> (index <code>2</code>) is already in correct place</li> <li>No swap needed</li> </ul> <p>\u27a1\ufe0f <code>2, 10, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/selection-sort.html#pass-4","title":"Pass 4:","text":"<ul> <li>Element <code>15</code> (index <code>3</code>) is also in correct place</li> <li>No swap needed</li> </ul> <p>\u27a1\ufe0f <code>2, 10, 12, 15, 20</code></p>"},{"location":"algorithms/sorting/selection-sort.html#final-sorted-array","title":"Final Sorted Array:","text":"<p><code>2, 10, 12, 15, 20 </code></p> <p>\ud83c\udf89 Selection Sort completed successfully!</p>"},{"location":"algorithms/sorting/selection-sort.html#selection-sort-c-implementation","title":"Selection Sort - C++ Implementation","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid selectionSort(int arr[], int n) {\n    for (int i = 0; i &lt; n - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[j] &lt; arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        swap(arr[i], arr[minIndex]);\n    }\n}\n\nvoid printArray(int arr[], int n) {\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    cout &lt;&lt; \"Original array: \";\n    printArray(arr, n);\n\n    selectionSort(arr, n);\n\n    cout &lt;&lt; \"Sorted array: \";\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre>"},{"location":"dev-workflow/index.html","title":"\ud83e\uddf0 Development Environment","text":"<p>A development environment is the collection of tools, configurations, and workflows that you use to write, test, and run your code efficiently.</p> <p>Whether you're building web apps, APIs, CLIs, or full-stack systems \u2014 having a clean, consistent setup is essential for productivity and reproducibility.</p>"},{"location":"dev-workflow/index.html#why-it-matters","title":"\ud83d\udca1 Why It Matters","text":"<p>A well-crafted dev environment helps you:</p> <ul> <li>Code faster with proper editor and terminal tools</li> <li>Automate repetitive tasks</li> <li>Easily switch between projects</li> <li>Maintain consistency across machines or team members</li> <li>Avoid \u201cit works on my machine\u201d issues</li> </ul>"},{"location":"dev-workflow/index.html#common-components","title":"\ud83e\uddf1 Common Components","text":"Tool/Area Purpose Code Editor e.g., VS Code, Neovim Terminal Shell access, productivity tooling (zsh, tmux) Dotfiles Shareable configs for your tools and shell CLI tools ripgrep, fzf, lazygit, etc. Automation Aliases, scripts, Makefiles for dev workflows"},{"location":"dev-workflow/index.html#what-youll-find-here","title":"\ud83c\udfd7\ufe0f What You'll Find Here","text":"<p>This section includes a curated setup based on my personal workflow:</p> <ul> <li>\u2728 Editor setup (VS Code, Neovim with Lazy)</li> <li>\u2699\ufe0f Terminal workflow (tmux + shell)</li> <li>\ud83d\udcc1 Dotfile management (using GNU Stow)</li> <li>\ud83e\uddea Helpful CLI tools and aliases</li> </ul> <p>\u26a0\ufe0f Everything is optimized for speed, keyboard-centric workflows, and reproducibility across machines.</p> <p>Ready? Let's dive into each component and how to set it up step-by-step.</p>"},{"location":"dev-workflow/nvim.html","title":"Neovim Config (Lazy.nvim Setup)","text":"<p>This is my personal Neovim setup, built with the modern Lazy.nvim plugin manager. It's optimized for speed, modularity, and developer productivity.</p> <p>The configuration includes:</p> <ul> <li>Fully Lua-based setup</li> <li>LSP and autocompletion via <code>mason.nvim</code> / <code>nvim-lspconfig</code></li> <li>Syntax highlighting with <code>nvim-treesitter</code></li> <li>File search and navigation with <code>telescope.nvim</code></li> <li>UI enhancements like statusline, tabline, and file explorer</li> </ul> <p>\ud83d\udcc1 Repository: Mohamedattiadev/.dotfiles \ud83d\udcc2 Path: <code>config/.config/nvim</code> \ud83c\udf3f Branch: <code>arch-config</code></p>"},{"location":"dev-workflow/nvim.html#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/Mohamedattiadev/.dotfiles.git ~/dotfiles\ncd ~/dotfiles\ngit checkout arch-config\n</code></pre>"},{"location":"dev-workflow/nvim.html#2-symlink-neovim-config-with-stow-recommended","title":"2. Symlink Neovim Config with Stow (Recommended)","text":"<pre><code>cd ~/dotfiles\nstow --dir=. config\n</code></pre> <p>This links your Neovim config from:</p> <pre><code>~/.config/nvim \u2192 ~/dotfiles/config/.config/nvim\n</code></pre> <p>Important: You must have GNU Stow installed.</p>"},{"location":"dev-workflow/nvim.html#3-launch-neovim","title":"3. Launch Neovim","text":"<p>Open Neovim to allow Lazy.nvim to auto-bootstrap and install plugins:</p> <pre><code>nvim\n</code></pre> <p>Lazy.nvim will:</p> <ul> <li>Install itself</li> <li>Install all listed plugins</li> <li>Load your full configuration</li> </ul> <p>Important: Make sure your system has the following installed:</p> <ul> <li><code>neovim</code> (v0.8+)</li> <li><code>git</code></li> <li><code>ripgrep</code></li> <li><code>curl</code></li> <li><code>stow</code> (optional, for symlinking)</li> </ul>"},{"location":"dev-workflow/nvim.html#4-features-included","title":"4. Features Included","text":"<ol> <li>Lazy-loaded plugin management (via Lazy.nvim)</li> <li>LSP and auto-completion with <code>mason</code>, <code>cmp</code>, <code>lspconfig</code></li> <li>Fast fuzzy finder using <code>telescope.nvim</code></li> <li>Syntax-aware highlighting with <code>nvim-treesitter</code></li> <li>Git integration (e.g., <code>gitsigns.nvim</code>)</li> <li>File explorer (<code>nvim-tree.lua</code> or similar)</li> <li>Statusline and UI components</li> <li>Modular config under the <code>lua/</code> directory</li> </ol>"},{"location":"dev-workflow/nvim.html#5-troubleshooting-tips","title":"5. Troubleshooting Tips","text":"<ul> <li>Use <code>:checkhealth</code> in Neovim to verify all dependencies.</li> <li>If startup errors occur, try deleting <code>lazy-lock.json</code> and re-opening Neovim.</li> <li>Ensure your shell environment is properly initialized when launching Neovim.</li> </ul>"},{"location":"dev-workflow/nvim.html#video-neovim-key-mapping-tutorials","title":"Video: Neovim Key Mapping Tutorials","text":"vim \u2013 Tutorial Configuring Neovim"},{"location":"dev-workflow/tmux.html","title":"Tmux Configuration","text":"<p>This is my customized tmux setup, using the Tmux Plugin Manager (TPM) for plugins and a workflow tailored to keyboard-driven productivity.</p> <p>Config location in repo:</p> <p>\ud83d\udcc1 Repository: Mohamedattiadev/.dotfiles \ud83d\udcc2 Path: <code>config/.config/nvim</code> \ud83c\udf3f Branch: <code>arch-config</code></p>"},{"location":"dev-workflow/tmux.html#installation","title":"\ud83d\udd27 Installation","text":""},{"location":"dev-workflow/tmux.html#1-install-tmux","title":"1. Install Tmux","text":"<pre><code>sudo apt install tmux     # Debian/Ubuntu\n# or\nbrew install tmux         # macOS\n</code></pre>"},{"location":"dev-workflow/tmux.html#2-clone-the-dotfiles","title":"2. Clone the Dotfiles","text":"<pre><code>git clone https://github.com/Mohamedattiadev/.dotfiles.git ~/dotfiles\ncd ~/dotfiles\n</code></pre>"},{"location":"dev-workflow/tmux.html#3-link-the-tmux-config","title":"3. Link the Tmux Config","text":"<pre><code>ln -sfn ~/dotfiles/.tmux/.tmux.conf ~/.tmux.conf\n</code></pre>"},{"location":"dev-workflow/tmux.html#4-install-tpm-plugin-manager","title":"4. Install TPM (Plugin Manager)","text":"<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/.tmux/plugins/tpm\n</code></pre>"},{"location":"dev-workflow/tmux.html#5-launch-tmux-and-install-plugins","title":"5. Launch tmux and Install Plugins","text":"<p>Inside tmux, press:</p> <pre><code>(Ctrl-a) + I\n</code></pre> <p>This installs all plugins listed in the config.</p>"},{"location":"dev-workflow/tmux.html#key-features","title":"Key Features","text":""},{"location":"dev-workflow/tmux.html#general-behavior","title":"General Behavior","text":"<ul> <li><code>Ctrl-a</code> as the prefix key (instead of <code>Ctrl-b</code>)</li> <li>Mouse support enabled</li> <li>Vi-style navigation in copy mode</li> <li>Session/window index starts at 1</li> <li>Fast pane navigation and resize</li> <li>Top-positioned status bar with minimal indicators</li> </ul>"},{"location":"dev-workflow/tmux.html#plugins-used","title":"Plugins Used","text":"Plugin Purpose <code>tpm</code> Plugin management <code>vim-tmux-navigator</code> Seamless movement between tmux and Neovim panes <code>tmux-resurrect</code> Save and restore sessions <code>tmux-continuum</code> Auto-save/restore tmux environment <code>tmuxifier</code> Modular session configs (optional support)"},{"location":"dev-workflow/tmux.html#keybindings","title":"\u2328\ufe0f Keybindings","text":"Action Binding Prefix key <code>Ctrl-a</code> Reload config <code>Prefix + r</code> Save session (manual) <code>Prefix + Ctrl-s</code> Restore session (manual) <code>Prefix + Ctrl-r</code> Resize pane <code>Prefix + h/j/k/l</code> Toggle zoom <code>Prefix + m</code> Start visual selection <code>v</code> in copy-mode Copy selected text <code>y</code> in copy-mode <p>Note: You can use <code>:checkhealth</code> in Neovim to verify <code>vim-tmux-navigator</code> is working properly.</p>"},{"location":"dev-workflow/tmux.html#theme-status","title":"\ud83c\udfa8 Theme &amp; Status","text":"<ul> <li>Simple black borders with magenta highlights</li> <li>Window bar with dot indicators:</li> <li>Current window: \u25cf (magenta)</li> <li>Other windows: \u25cf (gray)</li> <li>Minimal status line: session name on the left</li> </ul>"},{"location":"dev-workflow/tmux.html#tips-notes","title":"Tips &amp; Notes","text":"<ul> <li>Reload the config inside tmux with:</li> </ul> <pre><code>Ctrl-a r\n</code></pre> <ul> <li>Ensure the required tools are available:</li> <li><code>tmux</code>, <code>git</code>, <code>xclip</code> (for clipboard), <code>neovim</code></li> </ul>"},{"location":"dev-workflow/tmux.html#video-tutorial","title":"\ud83c\udfa5 Video Tutorial","text":"tmux Tutorial for Beginners (Terminal Multiplexer)"},{"location":"dev-workflow/tmux.html#summary","title":"Summary","text":"<ul> <li>Custom prefix (<code>Ctrl-a</code>), Vim-style bindings</li> <li>TPM + plugins for session persistence, navigation, and layout control</li> <li>Fully managed in your dotfiles at <code>.tmux/.tmux.conf</code></li> <li>Integrates smoothly with Neovim via <code>vim-tmux-navigator</code></li> </ul> <p>Would you like to proceed to documenting Zsh, starship, or your shell environment next?</p>"},{"location":"dev-workflow/vscode.html","title":"1. Why Use VS Code?","text":"<p>VS Code is a powerful code editor that works great with JavaScript, TypeScript, and many other languages. It supports:</p> <ul> <li>IntelliSense (auto-completion + type info)</li> <li>Git integration</li> <li>Debugging</li> <li>Extensions marketplace</li> <li>Cross-platform (Windows, macOS, Linux)</li> </ul>"},{"location":"dev-workflow/vscode.html#2-installing-vs-code","title":"2. Installing VS Code","text":"<p>Download from https://code.visualstudio.com</p> <p>After installing:</p> <ul> <li>Open the terminal: <code>Ctrl + ~</code> (or <code>Ctrl + `</code>)</li> <li>Open a folder: <code>File &gt; Open Folder</code></li> </ul>"},{"location":"dev-workflow/vscode.html#3-recommended-extensions","title":"3. Recommended Extensions","text":"<p>You can install extensions from the sidebar (<code>Ctrl+Shift+X</code>).</p>"},{"location":"dev-workflow/vscode.html#suggested-for-web-dev","title":"Suggested for Web Dev:","text":"<ul> <li>ESLint \u2013 Lint JavaScript/TypeScript</li> <li>Prettier \u2013 Auto-format code</li> <li>GitLens \u2013 Git superpowers</li> <li>Live Server \u2013 Auto-reload HTML/CSS</li> <li>Path Intellisense \u2013 Smart path suggestions</li> <li>Debugger for Chrome \u2013 Debug JS in the browser</li> <li>TabNine or Codeium \u2013 AI-powered completions</li> </ul> <pre><code># Or install from terminal (optional)\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension dbaeumer.vscode-eslint\n</code></pre>"},{"location":"dev-workflow/vscode.html#4-settings-overview","title":"4. Settings Overview","text":"<p>You can customize settings via:</p> <ul> <li>GUI: <code>File &gt; Preferences &gt; Settings</code></li> <li>Or directly via JSON (<code>Ctrl + Shift + P \u2192 Preferences: Open Settings (JSON)</code>)</li> </ul> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.tabSize\": 2,\n  \"files.autoSave\": \"onFocusChange\",\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"eslint.validate\": [\"javascript\", \"typescript\"]\n}\n</code></pre>"},{"location":"dev-workflow/vscode.html#5-vs-code-and-git","title":"5. VS Code and Git","text":"<p>VS Code has built-in Git support:</p> <ul> <li>Stage/commit from the Source Control panel (<code>Ctrl + Shift + G</code>)</li> <li>See diffs inline</li> <li>Resolve merge conflicts visually</li> <li>View blame history with GitLens</li> </ul>"},{"location":"dev-workflow/vscode.html#6-run-and-debug-code","title":"6. Run and Debug Code","text":"<p>Press <code>F5</code> or go to the Run &amp; Debug panel:</p> <ul> <li>Select environment (e.g., Node.js)</li> <li>Add a launch config in <code>.vscode/launch.json</code>:</li> </ul> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Run Node App\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/index.js\"\n    }\n  ]\n}\n</code></pre>"},{"location":"dev-workflow/vscode.html#7-integrated-terminal","title":"7. Integrated Terminal","text":"<p>Open terminal: <code>Ctrl + ~</code></p> <p>You can run commands like:</p> <pre><code>npm install\nnpm run dev\ngit status\n</code></pre> <p>You can also set default shell (bash, PowerShell, zsh) in Settings.</p>"},{"location":"dev-workflow/vscode.html#8-snippets-shortcuts","title":"8. Snippets &amp; Shortcuts","text":"<ul> <li><code>Ctrl + Space</code>: Trigger suggestions</li> <li><code>Shift + Alt + F</code>: Format file</li> <li><code>Ctrl + D</code>: Select next occurrence</li> <li><code>Ctrl + /</code>: Toggle comment</li> <li><code>Ctrl + P</code>: Quick file open</li> <li><code>Ctrl + Shift + P</code>: Command palette</li> </ul>"},{"location":"dev-workflow/vscode.html#9-tasks-automation","title":"9. Tasks &amp; Automation","text":"<p>Create a <code>.vscode/tasks.json</code> file to run custom build or test scripts.</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"npm: build\",\n      \"type\": \"shell\",\n      \"command\": \"npm run build\",\n      \"group\": \"build\"\n    }\n  ]\n}\n</code></pre> <p>Run with <code>Ctrl + Shift + B</code>.</p>"},{"location":"dev-workflow/vscode.html#10-my-vim-vscode-workflow","title":"10. my vim vscode workflow","text":""},{"location":"dev-workflow/vscode.html#settingsjson","title":"settings.json","text":"<pre><code>{\n  // -------------------------\n  //  File Save Behavior\n  // -------------------------\n  \"files.autoSave\": \"onFocusChange\",\n\n  // -------------------------\n  //  Vim Extension Settings\n  // -------------------------\n  \"vim.easymotion\": true,\n  \"vim.incsearch\": true,\n  \"vim.useSystemClipboard\": true,\n  \"vim.useCtrlKeys\": true,\n  \"vim.hlsearch\": true,\n  \"vim.sneak\": true,\n  \"vim.easymotionMarkerBackgroundColor\": \"#020202\",\n  \"vim.leader\": \"&lt;space&gt;\",\n\n  // Highlight yank settings (highlight text after copying)\n  \"vim.highlightedyank.enable\": true,\n  \"vim.highlightedyank.duration\": 300,\n  \"vim.highlightedyank.color\": \"rgba(255, 185, 4, 0.8)\",\n\n  // -------------------------\n  //  Vim Keybindings - Normal Mode\n  // -------------------------\n  \"vim.normalModeKeyBindings\": [\n    {\n      // Switch to the next editor tab\n      \"before\": [\"&lt;S-l&gt;\"],\n      \"commands\": [\"workbench.action.nextEditor\"]\n    },\n    {\n      // Switch to the previous editor tab\n      \"before\": [\"&lt;S-h&gt;\"],\n      \"commands\": [\"workbench.action.previousEditor\"]\n    },\n    // {\n    //  // Quick open file explorer\n    //  \"before\": [\"&lt;leader&gt;\",\"f\"],\n    //  \"commands\": [\"workbench.action.quickOpen\"]\n    // },\n    {\n      // Clear search highlight\n      \"before\": [\"&lt;leader&gt;\", \"n\", \"n\"],\n      \"commands\": [\":nohl\"]\n    }\n  ],\n\n  // -------------------------\n  //  Vim Keybindings - Normal Mode (Non-Recursive)\n  // -------------------------\n  \"vim.normalModeKeyBindingsNonRecursive\": [\n    {\n      // Save the current file\n      \"before\": [\"&lt;leader&gt;\", \"w\"],\n      \"commands\": [\"workbench.action.files.save\"]\n    },\n    {\n      // Show diagnostics (problems)\n      \"before\": [\"&lt;leader&gt;\", \"d\"],\n      \"commands\": [\"workbench.action.problems.focus\"]\n    },\n\n    {\n      // Start searching\n      \"before\": [\"/\"],\n      \"commands\": [\"actions.find\"]\n    },\n    // {\n    //     // Close panel or active editor\n    //     \"before\": [\"&lt;space&gt;\", \"&lt;space&gt;\", \"q\"],\n    //     \"commands\": [\n    //         {\n    //             \"command\": \"workbench.action.closePanel\",\n    //             \"when\": \"panelVisible\"\n    //         },\n    //         {\n    //             \"command\": \"workbench.action.closeActiveEditor\",\n    //             \"when\": \"!panelVisible\"\n    //         }\n    //     ]\n    // },\n    {\n      // Move 5 characters left with &lt;Tab&gt; + h\n      \"before\": [\"&lt;Tab&gt;\", \"h\"],\n      \"commands\": [\n        {\n          \"command\": \"cursorMove\",\n          \"args\": { \"to\": \"left\", \"by\": \"character\", \"value\": 5 }\n        }\n      ]\n    },\n    {\n      // Move 5 lines down with &lt;Tab&gt; + j\n      \"before\": [\"&lt;Tab&gt;\", \"j\"],\n      \"commands\": [\n        {\n          \"command\": \"cursorMove\",\n          \"args\": { \"to\": \"down\", \"by\": \"line\", \"value\": 5 }\n        }\n      ]\n    },\n    {\n      // Move 5 lines up with &lt;Tab&gt; + k\n      \"before\": [\"&lt;Tab&gt;\", \"k\"],\n      \"commands\": [\n        {\n          \"command\": \"cursorMove\",\n          \"args\": { \"to\": \"up\", \"by\": \"line\", \"value\": 5 }\n        }\n      ]\n    },\n    {\n      // Move 5 characters right with &lt;Tab&gt; + l\n      \"before\": [\"&lt;Tab&gt;\", \"l\"],\n      \"commands\": [\n        {\n          \"command\": \"cursorMove\",\n          \"args\": { \"to\": \"right\", \"by\": \"character\", \"value\": 5 }\n        }\n      ]\n    },\n    {\n      // Show hover information under the cursor\n      \"before\": [\"&lt;S-k&gt;\"],\n      \"commands\": [\"editor.action.showHover\"]\n    }\n    // {\n    //     // Format the current document\n    //     \"before\": [\"&lt;leader&gt;\", \"g\", \"f\"],\n    //     \"commands\": [\"editor.action.formatDocument\"]\n    // },\n    // {\n    //     // Go to the definition of the symbol under the cursor\n    //     \"before\": [\"&lt;leader&gt;\", \"g\", \"d\"],\n    //     \"commands\": [\"editor.action.revealDefinition\"]\n    // }\n  ],\n\n  // -------------------------\n  //  Vim Keybindings - Visual Mode\n  // -------------------------\n  \"vim.visualModeKeyBindings\": [\n    {\n      \"before\": [\"&gt;\"],\n      \"after\": [\"&gt;\", \"g\", \"v\"]\n    },\n    {\n      \"before\": [\"&lt;\"],\n      \"after\": [\"&lt;\", \"g\", \"v\"]\n    },\n    {\n      \"before\": [\"J\"],\n      \"commands\": [\"editor.action.moveLinesDownAction\"]\n    },\n    {\n      \"before\": [\"K\"],\n      \"commands\": [\"editor.action.moveLinesUpAction\"]\n    }\n  ],\n\n  // -------------------------\n  //  Disable Conflicting VS Code Keybindings for Vim\n  // -------------------------\n  \"vim.handleKeys\": {\n    \"&lt;C-a&gt;\": false,\n    \"&lt;C-f&gt;\": false,\n    \"&lt;C-c&gt;\": false,\n    \"&lt;C-x&gt;\": false,\n    \"&lt;C-v&gt;\": false,\n    \"&lt;C-z&gt;\": false,\n    \"&lt;C-y&gt;\": false,\n    \"&lt;C-S-h&gt;\": false,\n    \"&lt;C-S-l&gt;\": false,\n    \"&lt;C-h&gt;\": false,\n    \"&lt;C-j&gt;\": false,\n    \"&lt;C-k&gt;\": false,\n    \"&lt;C-l&gt;\": false\n  },\n\n  // -------------------------\n  //  Language-Specific Auto-Formatting\n  // -------------------------\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"vscode.typescript-language-features\",\n    \"editor.formatOnSave\": true\n  },\n  \"[typescriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\",\n    \"editor.formatOnSave\": true\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[css]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n\n  // -------------------------\n  //  Editor Appearance &amp; Behavior\n  // -------------------------\n  \"editor.minimap.enabled\": false,\n  \"editor.wordWrap\": \"on\",\n  \"editor.lineHeight\": 25,\n  \"editor.hover.enabled\": true,\n  \"editor.renderLineHighlight\": \"line\",\n  \"editor.occurrencesHighlight\": \"on\",\n  \"editor.guides.indentation\": true,\n  \"editor.guides.highlightActiveIndentation\": true,\n  \"editor.emptySelectionClipboard\": false,\n  \"editor.stickyScroll.enabled\": false,\n  \"editor.unicodeHighlight.invisibleCharacters\": false,\n  \"editor.unicodeHighlight.ambiguousCharacters\": false,\n  \"editor.bracketPairColorization.enabled\": false,\n  \"editor.multiCursorModifier\": \"ctrlCmd\",\n  \"editor.formatOnSave\": true,\n\n  // -------------------------\n  //  Workbench &amp; UI Settings\n  // -------------------------\n  \"workbench.colorTheme\": \"doom-one\",\n  \"workbench.iconTheme\": \"eq-material-theme-icons-light\",\n  \"workbench.editor.showTabs\": \"none\",\n  \"workbench.tips.enabled\": false,\n  \"breadcrumbs.enabled\": false,\n  \"window.menuBarVisibility\": \"toggle\",\n  \"zenMode.showTabs\": \"none\",\n  \"workbench.activityBar.location\": \"top\",\n  \"workbench.statusBar.visible\": false,\n  \"workbench.editor.editorActionsLocation\": \"hidden\",\n\n  // -------------------------\n  //  Color and Cursor Customizations\n  // -------------------------\n  \"workbench.colorCustomizations\": {\n    \"editorCursor.foreground\": \"#3498db\",\n    \"terminalCursor.foreground\": \"#3498db\",\n    \"terminalCursor.background\": \"#3498db\",\n    \"statusBar.background\": \"#005f5f\",\n    \"statusBar.noFolderBackground\": \"#005f5f\",\n    \"statusBar.debuggingBackground\": \"#005f5f\",\n    \"statusBar.foreground\": \"#ffffff\",\n    \"statusBar.debuggingForeground\": \"#ffffff\"\n  },\n  \"vim.cursorStylePerMode\": {\n    \"normal\": \"block\",\n    \"insert\": \"bar\",\n    \"replace\": \"underline\"\n  },\n  \"vim.cursorColor\": true, // Ensures Vim extension respects cursor color\n  \"vim.statusBarColorControl\": false,\n\n  // -------------------------\n  //  File Explorer Settings\n  // -------------------------\n  \"explorer.sortOrder\": \"type\",\n\n  // -------------------------\n  //  Git &amp; SCM Settings\n  // -------------------------\n  \"scm.diffDecorations\": \"none\",\n  \"git.decorations.enabled\": false,\n  \"git.autofetch\": true,\n\n  // -------------------------\n  //  Language &amp; Extension Specific Settings\n  // -------------------------\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  \"eslint.format.enable\": true,\n  \"eslint.codeActionsOnSave.rules\": null,\n  \"cmake.options.advanced\": {\n    \"build\": {\n      \"statusBarVisibility\": \"inherit\",\n      \"inheritDefault\": \"visible\"\n    },\n    \"launch\": {\n      \"statusBarVisibility\": \"inherit\",\n      \"inheritDefault\": \"visible\"\n    },\n    \"debug\": {\n      \"statusBarVisibility\": \"inherit\",\n      \"inheritDefault\": \"visible\"\n    }\n  }\n}\n</code></pre>"},{"location":"dev-workflow/vscode.html#keybindingsjson","title":"Keybindings.json","text":"<pre><code>// Place your key bindings in this file to override the defaults\n[\n  {\n    //up and down arrows\n    \"key\": \"j\",\n    \"command\": \"list.focusDown\",\n    \"when\": \"sideBarFocus &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"k\",\n    \"command\": \"list.focusUp\",\n    \"when\": \"sideBarFocus &amp;&amp; !inputFocus\"\n  },\n  // explorer\n  {\n    \"key\": \"a\",\n    \"command\": \"workbench.files.action.createFileFromExplorer\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"shift+a\",\n    \"command\": \"workbench.files.action.createFolderFromExplorer\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"shift+y\", // CORRECTED: Changed from 'y' to 'Y' (Shift+y) to avoid conflict\n    \"command\": \"filesExplorer.copy\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"x\",\n    \"command\": \"filesExplorer.cut\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"p\",\n    \"command\": \"filesExplorer.paste\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"d\",\n    \"command\": \"moveFileToTrash\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"r\",\n    \"command\": \"renameFile\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"g y\",\n    \"command\": \"copyFilePath\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"y\",\n    \"command\": \"copyRelativeFilePath\",\n    \"when\": \"filesExplorerFocus &amp;&amp; foldersViewVisible &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus\"\n  },\n  {\n    \"key\": \"ctrl+o\",\n    \"command\": \"vim.remap\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal'\",\n    \"args\": {\n      \"after\": [\"&lt;C-o&gt;\"]\n    }\n  }, // CORRECTED: Comma is now in the correct place, after the brace.\n  {\n    \"key\": \"ctrl+i\",\n    \"command\": \"vim.remap\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal'\",\n    \"args\": {\n      \"after\": [\"&lt;C-i&gt;\"]\n    }\n  },\n  {\n    \"key\": \"space e\",\n    \"command\": \"runCommands\",\n    \"args\": {\n      \"commands\": [\n        \"workbench.files.action.focusFilesExplorer\",\n        \"workbench.action.focusSideBar\"\n      ]\n    },\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !sideBarVisible &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \" space e\",\n    \"command\": \"workbench.action.toggleSidebarVisibility\",\n    \"when\": \" sideBarVisible  &amp;&amp; vim.mode == 'Normal' &amp;&amp;!terminalFocus\"\n  },\n  {\n    \"key\": \" space space f\",\n    \"command\": \"workbench.action.quickOpen\",\n    \"when\": \" sideBarVisible  &amp;&amp; vim.mode == 'Normal' &amp;&amp;!terminalFocus\"\n  },\n\n  {\n    \"key\": \"space e\",\n    \"command\": \"workbench.action.toggleSidebarVisibility\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; sideBarVisible &amp;&amp;!terminalFocus \"\n  },\n  // --- START: Pane and Panel Navigation ---\n\n  // Navigate between split editor panes with Ctrl + H/J/K/L\n  // Navigation\n  {\n    \"key\": \"ctrl-h\",\n    \"command\": \"workbench.action.navigateLeft\"\n  },\n  {\n    \"key\": \"ctrl-l\",\n    \"command\": \"workbench.action.navigateRight\"\n  },\n  {\n    \"key\": \"ctrl-k\",\n    \"command\": \"workbench.action.navigateUp\"\n  },\n  {\n    \"key\": \"ctrl-j\",\n    \"command\": \"workbench.action.navigateDown\"\n  },\n\n  // Toggle the Terminal open and closed with Space &gt; T &gt; T\n  // This is active only in Normal Mode to avoid conflicts while typing.\n  {\n    \"key\": \"space t t\",\n    \"command\": \"workbench.action.togglePanel\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space q\",\n    \"command\": \"workbench.action.toggleSidebarVisibility\",\n    \"when\": \"filesExplorerFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; sideBarVisible &amp;&amp; !terminalFocus\"\n  },\n  //  {\n  //     \"key\": \"ctrl+a\",\n  //     \"command\": \"workbench.action.quickchat.toggle\"\n  //   },\n  //   {\n  //     \"key\": \"ctrl+a\",\n  //     \"command\": \"workbench.view.extension.chatgpt-sidebar-view\"\n  //   },\n  {\n    \"key\": \"ctrl+shift+a\",\n    \"command\": \"workbench.panel.chatEditing\",\n    \"when\": \"workbench.panel.chat.view.edits.active\"\n  },\n  {\n    \"key\": \"space a\",\n    \"command\": \"workbench.panel.chat\",\n    \"when\": \"workbench.panel.chat.view.edits.active &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"ctrl+shift+l\",\n    \"command\": \"workbench.action.decreaseViewWidth\",\n    \"when\": \" editorFocus   &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"ctrl+shift+h\",\n    \"command\": \"workbench.action.increaseViewWidth\",\n    \"when\": \" editorFocus &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"ctrl+shift+l\",\n    \"command\": \"workbench.action.terminal.resizePaneRight\",\n    \"when\": \" terminalFocus\"\n  },\n  {\n    \"key\": \"ctrl+shift+h\",\n\n    \"command\": \"workbench.action.terminal.resizePaneLeft\",\n    \"when\": \" terminalFocus\"\n  },\n  {\n    \"key\": \"space q\",\n    \"command\": \"workbench.action.closeActiveEditor\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  // 3. Open the Git / Source Control sidebar with Space &gt; G &gt; G\n  {\n    \"key\": \"space g g\",\n    \"command\": \"workbench.view.scm\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space q\",\n    \"command\": \"workbench.action.closeSidebar\",\n    \"when\": \"activeViewlet == 'workbench.view.scm' &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  //\n  /* \u2500\u2500\u2500 Split editors \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n  {\n    \"key\": \"space space v\", // \u2423 \u2423 v  \u2192 vertical split (right)\n    \"command\": \"workbench.action.splitEditorRight\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space space h\", // \u2423 \u2423 h  \u2192 horizontal split (down)\n    \"command\": \"workbench.action.splitEditorDown\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n\n  /* \u2500\u2500\u2500 Open the file/folder under cursor in the Explorer with Space \u2500*/\n  {\n    \"key\": \"space ,\",\n    \"command\": \"workbench.action.showAllEditorsByMostRecentlyUsed\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal'  &amp;&amp; !terminalFocus\"\n  },\n\n  {\n    \"key\": \"ctrl+j\",\n    \"command\": \"workbench.action.quickOpenSelectNext\",\n    \"when\": \"inQuickOpen\"\n  },\n  {\n    \"key\": \"ctrl+k\",\n    \"command\": \"workbench.action.quickOpenSelectPrevious\",\n    \"when\": \"inQuickOpen\"\n  },\n\n  /* Suggest/completion widget inside the editor */\n  {\n    \"key\": \"ctrl+j\",\n    \"command\": \"selectNextSuggestion\",\n    \"when\": \"editorTextFocus &amp;&amp; suggestWidgetVisible\"\n  },\n  {\n    \"key\": \"ctrl+k\",\n    \"command\": \"selectPrevSuggestion\",\n    \"when\": \"editorTextFocus &amp;&amp; suggestWidgetVisible\"\n  },\n\n  /* Search results panel (Ctrl+Shift+F) */\n  {\n    \"key\": \"ctrl+j\",\n    \"command\": \"search.action.focusNextSearchResult\",\n    \"when\": \"hasSearchResults &amp;&amp; searchViewletFocus\"\n  },\n  {\n    \"key\": \"ctrl+k\",\n    \"command\": \"search.action.focusPreviousSearchResult\",\n    \"when\": \"hasSearchResults &amp;&amp; searchViewletFocus\"\n  },\n  {\n    \"key\": \"space w\",\n    \"command\": \"workbench.action.files.save\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space f w\",\n    \"command\": \"workbench.action.findInFiles\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space q\",\n    \"command\": \"workbench.action.closeSidebar\",\n    \"when\": \"activeViewlet == 'workbench.view.search' &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  // 2. Search for files with Space &gt; F\n  {\n    \"key\": \"space space f\",\n    \"command\": \"workbench.action.quickOpen\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space g d\",\n    //go to definition\n    \"command\": \"editor.action.revealDefinition\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; editorHasDefinitionProvider &amp;&amp; !editorReadonly &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space g r\", //go to references\n    \"command\": \"editor.action.goToReferences\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; editorHasReferenceProvider &amp;&amp; !editorReadonly &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space g i\", //go to implementation\n    \"command\": \"editor.action.goToImplementation\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; editorHasImplementationProvider &amp;&amp; !editorReadonly &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space g f\",\n    //format\n    \"command\": \"editor.action.formatDocument\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; editorHasDocumentFormattingProvider &amp;&amp; !editorReadonly &amp;&amp; !terminalFocus\"\n  },\n  {\n    \"key\": \"space g a\",\n    //go to type definition\n    \"command\": \"editor.action.goToTypeDefinition\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; editorHasTypeDefinitionProvider &amp;&amp; !editorReadonly\"\n  },\n  {\n    \"key\": \"space g s\",\n    //go to symbol\n    \"command\": \"workbench.action.gotoSymbol\",\n    \"when\": \"editorTextFocus &amp;&amp; vim.mode == 'Normal' &amp;&amp; !editorReadonly &amp;&amp; !terminalFocus\"\n  }\n]\n</code></pre>"},{"location":"dev-workflow/vscode.html#summary","title":"Summary","text":"<ul> <li>Use extensions for linting, formatting, Git, and live reload.</li> <li>Save configs in <code>.vscode/</code> to share with team members.</li> <li>Customize shortcuts and terminal for your workflow.</li> <li>Combine with GitHub, Docker, or CI/CD for a complete dev setup.</li> </ul>"},{"location":"dev-workflow/n8n/index.html","title":"n8n Docker Setup","text":"<p>This README explains how to run, stop, and persist data for n8n using Docker.</p>"},{"location":"dev-workflow/n8n/index.html#1-run-n8n-with-persistent-storage","title":"1. Run n8n with persistent storage","text":"<pre><code>docker run -d \\\n  --name n8n \\\n  --restart always \\\n  -p 5678:5678 \\\n  -v ~/.config/n8n:/home/node/.n8n \\\n  n8nio/n8n:latest\n</code></pre> <ul> <li><code>--name n8n</code> \u2192 container name.</li> <li><code>--restart always</code> \u2192 auto-restart on reboot.</li> <li><code>-p 5678:5678</code> \u2192 maps n8n web UI to http://localhost:5678.</li> <li><code>-v ~/.config/n8n:/home/node/.n8n</code> \u2192 saves all workflows/credentials to your home folder.</li> </ul>"},{"location":"dev-workflow/n8n/index.html#11-stop-n8n","title":"1.1 Stop n8n","text":"<pre><code>docker stop n8n\n</code></pre>"},{"location":"dev-workflow/n8n/index.html#12-start-n8n-again","title":"1.2 Start n8n again","text":"<pre><code>docker start n8n\n</code></pre>"},{"location":"dev-workflow/n8n/index.html#13-check-logs","title":"1.3 Check logs","text":"<pre><code>docker logs -f n8n\n</code></pre>"},{"location":"dev-workflow/n8n/index.html#14-remove-container-keeps-data-safe","title":"1.4 Remove container (keeps data safe)","text":"<pre><code>docker rm -f n8n\n</code></pre>"},{"location":"dev-workflow/n8n/index.html#2-removing-the-container-does-not-delete-your-workflows","title":"2. Removing the container does not delete your workflows.","text":"<ul> <li>Data lives in <code>~/.config/n8n</code>. You can re-run <code>docker run ...</code> and pick up the same data.</li> </ul> <p>by creating a .tar.gz file and extraxte it u can backup and restore :</p>"},{"location":"dev-workflow/n8n/index.html#21-backup","title":"2.1 Backup:","text":"<pre><code>tar czf n8n_data_backup.tar.gz ~/.config/n8n\n</code></pre>"},{"location":"dev-workflow/n8n/index.html#22-restore","title":"2.2 Restore:","text":"<pre><code>tar xzf n8n_data_backup.tar.gz -C ~/\nsudo chown -R 1000:1000 ~/.config/n8n\n</code></pre> <p>Then run the container again.</p>"},{"location":"dev-workflow/n8n/index.html#important-notes","title":"Important Notes","text":"<p>The <code>.config/n8n</code> folder contains:</p> <ul> <li><code>database.sqlite</code> \u2192 workflows &amp; executions.</li> <li><code>.n8n.env</code> \u2192 encryption key for credentials.</li> </ul> <p>Always keep <code>.n8n.env</code> safe, otherwise credentials can\u2019t be decrypted when restoring.</p>"},{"location":"dev-workflow/n8n/index.html#access-n8n","title":"Access n8n :","text":"<p>Once running, open:</p> <ul> <li>http://localhost:5678</li> </ul>"},{"location":"devops/index.html","title":"\ud83c\udf10 DevOps Overview","text":"<p>DevOps is a modern software development culture that brings together development (Dev) and operations (Ops) teams to collaborate, automate, and deliver software faster and more reliably.</p>"},{"location":"devops/index.html#what-is-devops","title":"\ud83d\ude80 What is DevOps?","text":"<p>DevOps is not a single tool or technology \u2014 it's a set of practices and cultural philosophies aimed at:</p> <ul> <li>Reducing the gap between development and deployment</li> <li>Automating repetitive manual tasks</li> <li>Improving collaboration and accountability</li> <li>Delivering features faster with fewer bugs</li> </ul>"},{"location":"devops/index.html#devops-goals","title":"\ud83c\udfaf DevOps Goals","text":"<ul> <li>\u2705 Continuous Integration (CI): Automatically test and merge code changes</li> <li>\u2705 Continuous Delivery/Deployment (CD): Push code to production quickly &amp; safely</li> <li>\u2705 Infrastructure as Code (IaC): Manage infrastructure using versioned config files</li> <li>\u2705 Monitoring &amp; Feedback: Detect problems early and respond quickly</li> <li>\u2705 Scalability: Build systems that can grow smoothly as demand increases</li> </ul>"},{"location":"devops/index.html#key-concepts-tools","title":"\ud83d\udee0\ufe0f Key Concepts &amp; Tools","text":"Area Tools / Concepts Version Control Git, GitHub / GitLab CI/CD GitHub Actions, GitLab CI, Jenkins Containerization Docker Orchestration Docker Compose, Kubernetes Web Servers / Proxies Nginx, Apache Infrastructure Terraform, Ansible Monitoring Prometheus, Grafana, ELK Stack"},{"location":"devops/index.html#devops-lifecycle","title":"\ud83d\udd04 DevOps Lifecycle","text":"<pre><code>Plan \u2192 Develop \u2192 Build \u2192 Test \u2192 Release \u2192 Deploy \u2192 Operate \u2192 Monitor \u2192 (Repeat)\n</code></pre> <p>This cycle helps teams ship features faster, safer, and more frequently, with automation and reliability built in.</p>"},{"location":"devops/index.html#why-devops-matters","title":"\ud83d\udca1 Why DevOps Matters","text":"<p>Without DevOps:</p> <ul> <li>Code works on your machine but not in production</li> <li>Manual deployments are risky and time-consuming</li> <li>Debugging and rollback are painful</li> </ul> <p>With DevOps:</p> <ul> <li>Environments are reproducible (thanks to containers)</li> <li>Changes are tested and deployed automatically</li> <li>Teams collaborate more effectively</li> </ul> <p>\ud83e\udded In the next sections, you'll explore how tools like Docker, Docker Compose, Nginx, and CI/CD pipelines make this vision a reality.</p>"},{"location":"devops/Git/git.html","title":"Git Essentials for Developers","text":"<p>Git is a distributed version control system that tracks changes in source code. It\u2019s the foundation for modern collaboration, CI/CD, and DevOps workflows.</p>"},{"location":"devops/Git/git.html#1-what-is-git","title":"1. What Is Git?","text":"<p>Git allows you to:</p> <ul> <li>Track and revert changes</li> <li>Work on different features safely</li> <li>Collaborate with others without overwriting work</li> </ul> <p>You interact with Git using commands via the terminal or GUI tools like VS Code, GitHub Desktop, or Sourcetree.</p>"},{"location":"devops/Git/git.html#2-setting-up-git","title":"2. Setting Up Git","text":"<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n</code></pre> <p>These commands set your identity for all repositories on your machine.</p>"},{"location":"devops/Git/git.html#3-creating-a-repository","title":"3. Creating a Repository","text":""},{"location":"devops/Git/git.html#initialize-a-new-local-repo","title":"Initialize a new local repo:","text":"<pre><code>git init\n</code></pre>"},{"location":"devops/Git/git.html#clone-an-existing-repo","title":"Clone an existing repo:","text":"<pre><code>git clone https://github.com/user/repo.git\n</code></pre>"},{"location":"devops/Git/git.html#4-common-git-commands","title":"4. Common Git Commands","text":""},{"location":"devops/Git/git.html#track-files","title":"Track files:","text":"<pre><code>git add filename       # add a single file\ngit add .              # add all changes\n</code></pre>"},{"location":"devops/Git/git.html#save-a-snapshot","title":"Save a snapshot:","text":"<pre><code>git commit -m \"Describe your changes\"\n</code></pre>"},{"location":"devops/Git/git.html#view-changes","title":"View changes:","text":"<pre><code>git status             # current working state\ngit diff               # see changes before committing\n</code></pre>"},{"location":"devops/Git/git.html#5-working-with-branches","title":"5. Working with Branches","text":""},{"location":"devops/Git/git.html#create-and-switch","title":"Create and switch:","text":"<pre><code>git checkout -b feature-branch\n</code></pre>"},{"location":"devops/Git/git.html#merge-into-main","title":"Merge into main:","text":"<pre><code>git checkout main\ngit merge feature-branch\n</code></pre>"},{"location":"devops/Git/git.html#delete-a-branch","title":"Delete a branch:","text":"<pre><code>git branch -d feature-branch\n</code></pre>"},{"location":"devops/Git/git.html#6-pushing-to-remote","title":"6. Pushing to Remote","text":""},{"location":"devops/Git/git.html#connect-your-repo-to-github","title":"Connect your repo to GitHub:","text":"<pre><code>git remote add origin https://github.com/user/repo.git\n</code></pre>"},{"location":"devops/Git/git.html#push-your-commits","title":"Push your commits:","text":"<pre><code>git push -u origin main\n</code></pre>"},{"location":"devops/Git/git.html#7-pulling-changes","title":"7. Pulling Changes","text":"<p>Always sync before working:</p> <pre><code>git pull origin main\n</code></pre> <p>This updates your local copy with the latest remote changes.</p>"},{"location":"devops/Git/git.html#8-resolving-merge-conflicts","title":"8. Resolving Merge Conflicts","text":"<p>When two changes clash, Git marks the conflict. You\u2019ll need to manually edit the file and commit again.</p> <p>Important: Conflicts are common \u2014 learn to read Git's conflict markers (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>).</p>"},{"location":"devops/Git/git.html#9-git-ignore","title":"9. Git Ignore","text":"<p>Use <code>.gitignore</code> to prevent committing unnecessary files:</p> <pre><code>node_modules/\ndist/\n.env\n</code></pre>"},{"location":"devops/Git/git.html#summary","title":"\u2705 Summary","text":"<ul> <li>Git tracks your code history and enables safe collaboration.</li> <li>Use <code>add</code>, <code>commit</code>, and <code>push</code> daily.</li> <li>Branching and merging allow multiple features to be developed independently.</li> <li><code>.gitignore</code> avoids bloating the repo with generated or sensitive files.</li> </ul>"},{"location":"devops/Git/git.html#video-git-for-beginners","title":"\ud83d\udcfa Video: Git for Beginners","text":"Git &amp; GitHub Crash Course \u2013 Traversy Media"},{"location":"devops/Git/github.html","title":"GitHub Workflows and Collaboration","text":"<p>GitHub is more than just a place to store code. It\u2019s a collaboration platform for teams, open-source contributors, and automation.</p>"},{"location":"devops/Git/github.html#1-getting-started","title":"1. Getting Started","text":"<p>To begin using GitHub:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n</code></pre> <p>Use SSH for secure authentication, or use personal access tokens for HTTPS.</p>"},{"location":"devops/Git/github.html#2-fork-vs-clone","title":"2. Fork vs Clone","text":"<p>Clone Use when you want a local copy of a repo you already have access to:</p> <pre><code>git clone https://github.com/user/repo.git\n</code></pre> <p>Fork Creates a copy of someone else\u2019s repo under your GitHub account. Useful when contributing to public projects.</p> <p>Important: After forking, keep your fork updated by adding the original as an <code>upstream</code> remote:</p> <pre><code>git remote add upstream https://github.com/original/repo.git\ngit fetch upstream\ngit merge upstream/main\n</code></pre>"},{"location":"devops/Git/github.html#3-pull-request-workflow","title":"3. Pull Request Workflow","text":"<p>Steps:</p> <ol> <li>Create a new branch:</li> </ol> <pre><code>git checkout -b feature/your-branch-name\n</code></pre> <ol> <li>Make changes and commit:</li> </ol> <pre><code>git add .\ngit commit -m \"Add new feature\"\n</code></pre> <ol> <li>Push the branch:</li> </ol> <pre><code>git push origin feature/your-branch-name\n</code></pre> <ol> <li>Open a Pull Request on GitHub and request a code review.</li> </ol> <p>Important: Avoid pushing directly to <code>main</code>. Always use branches and PRs.</p>"},{"location":"devops/Git/github.html#4-branch-protection-rules","title":"4. Branch Protection Rules","text":"<p>Organizations often protect the <code>main</code> or <code>production</code> branch by requiring:</p> <ul> <li>Pull request reviews before merging</li> <li>Passing CI checks (like tests and linting)</li> <li>Preventing force-pushes or deletions</li> </ul> <p>Set up in <code>Repo Settings \u2192 Branches \u2192 Add Rule</code>.</p>"},{"location":"devops/Git/github.html#5-issues-discussions","title":"5. Issues &amp; Discussions","text":""},{"location":"devops/Git/github.html#issues","title":"Issues","text":"<p>Used to report bugs, request features, or assign tasks.</p> <p>You can:</p> <ul> <li>Label them (<code>bug</code>, <code>enhancement</code>, etc.)</li> <li>Assign team members</li> <li>Link them to pull requests</li> </ul>"},{"location":"devops/Git/github.html#discussions","title":"Discussions","text":"<p>Used for general Q&amp;A, design proposals, or announcements.</p>"},{"location":"devops/Git/github.html#6-github-actions-preview","title":"6. GitHub Actions (Preview)","text":"<p>GitHub Actions automate workflows like:</p> <ul> <li>Running tests on PRs</li> <li>Linting before merge</li> <li>Auto-deploying after merge</li> </ul> <p>Workflows are defined in:</p> <pre><code>.github/workflows/main.yml\n</code></pre> <p>This will be covered in more depth in the next section.</p>"},{"location":"devops/Git/github.html#7-real-world-workflow","title":"7. Real-World Workflow","text":"<ol> <li>Clone the repo</li> <li>Create a new branch</li> <li>Make changes</li> <li>Push the branch</li> <li>Open a pull request</li> <li>Code is reviewed and CI is triggered</li> <li>Merge once approved</li> </ol>"},{"location":"devops/Git/github.html#video-github-workflow-tutorial","title":"Video: GitHub Workflow Tutorial","text":"GitHub Workflow for Teams \u2013 The Net Ninja"},{"location":"devops/Git/github.html#summary","title":"Summary","text":"<ul> <li>Use branches and PRs to manage code collaboratively.</li> <li>Fork for contributing to public repos.</li> <li>Enable branch protections to safeguard your main branch.</li> <li>Use issues and discussions for team communication.</li> <li>Next: Learn to automate workflows with GitHub Actions.</li> </ul>"},{"location":"devops/docker/docker-compose.html","title":"\u2699\ufe0f Docker Compose \u2014 Simplifying Multi-Container Dev Environments","text":"<p>Docker Compose allows you to define, configure, and manage multiple Docker containers using a single file (<code>docker-compose.yml</code>). It's ideal for microservices, full-stack apps, databases, and local development workflows.</p>"},{"location":"devops/docker/docker-compose.html#what-is-docker-composeyml","title":"\ud83d\udcd8 What is <code>docker-compose.yml</code>?","text":"<p>It\u2019s a YAML file where you:</p> <ul> <li>Declare your services (web, db, redis, etc.)</li> <li>Set up networks, volumes, and environment variables</li> <li>Control how your containers connect and depend on each other</li> </ul>"},{"location":"devops/docker/docker-compose.html#example","title":"\u2705 Example","text":"<pre><code>version: \"3.8\"\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n    volumes:\n      - .:/app\n    depends_on:\n      - db\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypass\n      POSTGRES_DB: mydb\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes:\n  db-data:\n</code></pre> <p>This sets up a Node.js app (<code>web</code>) that connects to a Postgres database (<code>db</code>) with persistent data.</p>"},{"location":"devops/docker/docker-compose.html#why-use-docker-compose","title":"\ud83e\udde0 Why Use Docker Compose?","text":"<ul> <li>\ud83d\udd17 Simplifies multi-container setup</li> <li>\ud83e\uddea Makes testing environments reproducible</li> <li>\ud83d\udce6 Supports volume mounting and networking</li> <li>\u23f1 Speeds up onboarding and dev workflows</li> </ul>"},{"location":"devops/docker/docker-compose.html#common-commands","title":"Common Commands","text":"Action Command Start services <code>docker-compose up</code> Start in background <code>docker-compose up -d</code> Stop &amp; remove services <code>docker-compose down</code> Remove with volumes <code>docker-compose down -v</code> Build services <code>docker-compose build</code> View logs <code>docker-compose logs -f</code> Access a container <code>docker-compose exec web bash</code> <p>\ud83d\udca1 Use <code>--profile</code> or <code>.env</code> files to enable more advanced setups.</p>"},{"location":"devops/docker/docker-compose.html#video-docker-compose","title":"\ud83c\udfa5 Video: Docker Compose","text":"Docker Compose"},{"location":"devops/docker/docker.html","title":"Docker \ud83d\udc33","text":"<p>Docker allows developers to package applications and dependencies into isolated containers. This helps ensure consistent environments across different machines.</p>"},{"location":"devops/docker/docker.html#what-is-docker","title":"\ud83d\udce6 What is Docker?","text":"<p>Docker is a containerization platform. You can think of containers like lightweight virtual machines, but faster and more efficient.</p>"},{"location":"devops/docker/docker.html#key-concepts","title":"\ud83d\udd0d Key Concepts","text":"<ol> <li>Image \u2013 A snapshot of your app + environment (code, dependencies, OS).</li> <li>Container \u2013 A running instance of an image.</li> <li>Dockerfile \u2013 A set of instructions to build an image.</li> <li>Docker Hub \u2013 A public registry for Docker images (like GitHub for containers).</li> </ol>"},{"location":"devops/docker/docker.html#basic-commands","title":"\ud83d\ude80 Basic Commands","text":""},{"location":"devops/docker/docker.html#1-check-docker-is-working","title":"1. Check Docker is working:","text":"<pre><code>docker --version\ndocker info\n</code></pre>"},{"location":"devops/docker/docker.html#2-run-a-container","title":"2. Run a container:","text":"<pre><code>docker run hello-world\n</code></pre>"},{"location":"devops/docker/docker.html#3-pull-an-image","title":"3. Pull an image:","text":"<pre><code>docker pull node:18\n</code></pre>"},{"location":"devops/docker/docker.html#4-run-a-container-with-interactive-shell","title":"4. Run a container with interactive shell:","text":"<pre><code>docker run -it ubuntu bash\n</code></pre>"},{"location":"devops/docker/docker.html#5-list-running-containers","title":"5. List running containers:","text":"<pre><code>docker ps\n</code></pre>"},{"location":"devops/docker/docker.html#6-list-all-containers","title":"6. List all containers:","text":"<pre><code>docker ps -a\n</code></pre>"},{"location":"devops/docker/docker.html#7-stop-and-remove","title":"7. Stop and remove:","text":"<pre><code>docker stop &lt;container_id&gt;\ndocker rm &lt;container_id&gt;\n</code></pre>"},{"location":"devops/docker/docker.html#example-node-app-with-docker","title":"\ud83d\udcc4 Example: Node App with Docker","text":""},{"location":"devops/docker/docker.html#1-dockerfile","title":"1. <code>Dockerfile</code>","text":"<pre><code>FROM node:18\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"devops/docker/docker.html#2-build-and-run","title":"2. Build and run","text":"<pre><code>docker build -t my-node-app .\ndocker run -p 3000:3000 my-node-app\n</code></pre>"},{"location":"devops/docker/docker.html#clean-up","title":"\ud83e\uddf9 Clean up","text":"<pre><code>docker system prune -a\n</code></pre> <p>Important: This deletes unused images, containers, and networks!</p>"},{"location":"devops/docker/docker.html#video-learn-docker-quickly","title":"Video: Learn Docker Quickly","text":"Docker Crash Course for Beginners \ud83d\udc33"},{"location":"frontend/index.html","title":"Frontend Development Overview","text":"<p>Frontend development focuses on the visual and interactive parts of a website or web application \u2014 what users see and interact with directly in their browser.</p>"},{"location":"frontend/index.html#core-responsibilities","title":"\ud83e\udde0 Core Responsibilities","text":"<ul> <li>UI/UX Implementation: Translating design mockups into working interfaces</li> <li>Interactivity: Handling user interactions like clicks, input, and navigation</li> <li>Performance Optimization: Ensuring fast load times and smooth experiences</li> <li>Responsiveness: Making interfaces work well across all devices and screen sizes</li> <li>Accessibility (a11y): Designing for inclusivity and usability by everyone</li> </ul>"},{"location":"frontend/index.html#core-technologies","title":"\ud83d\udee0\ufe0f Core Technologies","text":"Layer Technology Description Structure HTML Markup language that defines page structure Style CSS Styles layout, colors, and fonts Behavior JavaScript (JS) Adds interactivity and dynamic behavior"},{"location":"frontend/index.html#modern-frontend-stack","title":"\u2699\ufe0f Modern Frontend Stack","text":"<ul> <li>Frameworks: React, Vue.js, Angular, Svelte</li> <li>Styling: Tailwind CSS, Sass, CSS Modules, Styled Components</li> <li>Build Tools: Vite, Webpack, Parcel</li> <li>Package Managers: npm, yarn, pnpm</li> <li>Type Safety: TypeScript</li> <li>Testing: Jest, Vitest, Cypress, Playwright</li> <li>State Management: Redux, Zustand, Vuex, Recoil</li> </ul>"},{"location":"frontend/index.html#key-concepts","title":"\ud83e\udde9 Key Concepts","text":"<ul> <li>DOM Manipulation</li> <li>Event Handling</li> <li>Component-Based Architecture</li> <li>Routing &amp; Navigation</li> <li>API Integration (AJAX/Fetch/REST/GraphQL)</li> <li>Responsive Design &amp; Media Queries</li> <li>Cross-Browser Compatibility</li> <li>Progressive Enhancement &amp; Graceful Degradation</li> </ul>"},{"location":"frontend/index.html#security-best-practices","title":"\ud83d\udd10 Security Best Practices","text":"<ul> <li>Input validation &amp; sanitization</li> <li>Avoiding XSS and CSRF vulnerabilities</li> <li>Using HTTPS and secure cookies</li> </ul>"},{"location":"frontend/index.html#learning-resources","title":"\ud83d\udcda Learning Resources","text":"<ul> <li> <p>MDN Web Docs   The official and most comprehensive reference for HTML, CSS, and JavaScript.</p> </li> <li> <p>freeCodeCamp   100% free platform with interactive coding challenges, projects, and certifications.</p> </li> <li> <p>JavaScript.info   A modern deep dive into JavaScript with lots of practical examples.</p> </li> <li> <p>CSS-Tricks   Practical CSS tips, articles, and frontend-focused tutorials.</p> </li> <li> <p>W3Schools   Beginner-friendly tutorials and examples for HTML, CSS, and JS.</p> </li> <li> <p>The Odin Project   A full-stack curriculum with a strong frontend foundation and real-world projects.</p> </li> <li> <p>Codecademy   Interactive platform for learning frontend and full-stack development.</p> </li> <li> <p>SuperSimpleDev on YouTube   Friendly and beginner-oriented YouTube channel for HTML, CSS, and JavaScript.</p> </li> </ul>"},{"location":"frontend/index.html#frontend-video-tutorials-the-best-videos","title":"Frontend Video Tutorials (the best videos)","text":"<p>HTML &amp; CSS</p> <p>JavaScript</p> <p>Frontend development is where design meets code. It requires a balance of technical skill, creativity, and user empathy.</p>"},{"location":"frontend/css/css.html","title":"CSS Basics \ud83c\udfa8","text":"<p>CSS (Cascading Style Sheets) is used to control the look and feel of HTML elements \u2014 fonts, colors, spacing, layout, and more.</p>"},{"location":"frontend/css/css.html#1-how-to-include-css","title":"1. How to Include CSS","text":""},{"location":"frontend/css/css.html#inline","title":"Inline","text":"<pre><code>&lt;p style=\"color: red;\"&gt;Hello&lt;/p&gt;\n&lt;!-- Applies style directly to this element --&gt;\n</code></pre>"},{"location":"frontend/css/css.html#internal","title":"Internal","text":"<pre><code>&lt;style&gt;\n  p {\n    color: red; /* Makes all &lt;p&gt; tags red */\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"frontend/css/css.html#external-best-practice","title":"External (Best practice)","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\n&lt;!-- Links to an external stylesheet --&gt;\n</code></pre>"},{"location":"frontend/css/css.html#2-selectors","title":"2. Selectors","text":"<pre><code>p {\n  color: blue; /* All &lt;p&gt; elements will be blue */\n}\n\n.card {\n  padding: 1rem; /* Adds spacing inside the card */\n}\n\n#header {\n  background: black; /* Applies a black background to the element with ID 'header' */\n}\n\nnav a {\n  color: green; /* All &lt;a&gt; inside &lt;nav&gt; will be green */\n}\n\nh1,\nh2,\nh3 {\n  font-weight: bold; /* Makes all headers bold */\n}\n</code></pre>"},{"location":"frontend/css/css.html#3-colors","title":"3. Colors","text":"<pre><code>color: red; /* Named color */\ncolor: #ff0000; /* Hexadecimal */\ncolor: rgb(255, 0, 0); /* RGB format */\ncolor: hsl(0, 100%, 50%); /* HSL format */\nbackground-color: #f0f0f0; /* Light gray background */\n</code></pre>"},{"location":"frontend/css/css.html#4-fonts-text","title":"4. Fonts &amp; Text","text":"<pre><code>font-size: 16px; /* Size of text */\nfont-family: Arial, sans-serif; /* Font type */\nfont-weight: bold; /* Bold text */\ntext-align: center; /* Centers text horizontally */\ntext-decoration: underline; /* Underlines text */\nline-height: 1.6; /* Space between lines */\nletter-spacing: 0.5px; /* Space between letters */\n</code></pre>"},{"location":"frontend/css/css.html#5-box-model","title":"5. Box Model","text":"<pre><code>width: 200px; /* Element width */\nheight: 100px; /* Element height */\npadding: 10px; /* Space inside border */\nmargin: 20px; /* Space outside border */\nborder: 1px solid black; /* 1px solid black border */\nbox-sizing: border-box; /* Includes padding/border in width &amp; height */\n</code></pre>"},{"location":"frontend/css/css.html#6-display-position","title":"6. Display &amp; Position","text":"<pre><code>display: block; /* Default for divs */\ndisplay: inline; /* Sits next to elements */\ndisplay: flex; /* Enables flex layout */\ndisplay: grid; /* Enables grid layout */\ndisplay: none; /* Hides the element */\n\nposition: static; /* Default position */\nposition: relative; /* Positioned relative to itself */\nposition: absolute; /* Positioned relative to nearest positioned ancestor */\nposition: fixed; /* Fixed to viewport */\nz-index: 10; /* Layer order */\ntop: 0; /* Position from top */\nleft: 20px; /* Position from left */\n</code></pre>"},{"location":"frontend/css/css.html#7-flexbox","title":"7. Flexbox","text":"<pre><code>.container {\n  display: flex; /* Activates flexbox layout */\n  justify-content: center; /* Aligns items horizontally */\n  align-items: center; /* Aligns items vertically */\n  gap: 1rem; /* Adds space between items */\n}\n</code></pre>"},{"location":"frontend/css/css.html#8-grid","title":"8. Grid","text":"<pre><code>.container {\n  display: grid; /* Enables grid layout */\n  grid-template-columns: 1fr 2fr; /* Two columns: 1/3 and 2/3 width */\n  gap: 1rem; /* Space between grid items */\n}\n</code></pre>"},{"location":"frontend/css/css.html#9-borders-radius","title":"9. Borders &amp; Radius","text":"<pre><code>border: 2px solid #000; /* Solid black 2px border */\nborder-radius: 8px; /* Rounded corners */\n</code></pre>"},{"location":"frontend/css/css.html#10-shadows","title":"10. Shadows","text":"<pre><code>box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Shadow behind element */\ntext-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3); /* Shadow behind text */\n</code></pre>"},{"location":"frontend/css/css.html#11-backgrounds","title":"11. Backgrounds","text":"<pre><code>background-color: #fafafa; /* Light background */\nbackground-image: url(\"image.jpg\"); /* Adds background image */\nbackground-size: cover; /* Scale to fill */\nbackground-repeat: no-repeat; /* Prevent repeat */\nbackground-position: center; /* Center the image */\n</code></pre>"},{"location":"frontend/css/css.html#12-hover-pseudo-classes","title":"12. Hover &amp; Pseudo-classes","text":"<pre><code>a:hover {\n  color: red; /* Turns link red on hover */\n}\n\ninput:focus {\n  border-color: blue; /* Changes border when input is focused */\n}\n</code></pre>"},{"location":"frontend/css/css.html#13-transitions-animations","title":"13. Transitions &amp; Animations","text":"<pre><code>button {\n  transition: background-color 0.3s ease; /* Smooth color change */\n}\n\nbutton:hover {\n  background-color: black; /* Change color on hover */\n}\n\n@keyframes slide {\n  from {\n    transform: translateX(0);\n  } /* Start position */\n  to {\n    transform: translateX(100px);\n  } /* End position */\n}\n\n.box {\n  animation: slide 1s forwards; /* Plays slide animation */\n}\n</code></pre>"},{"location":"frontend/css/css.html#14-media-queries-responsive-design","title":"14. Media Queries (Responsive Design)","text":"<pre><code>@media (max-width: 768px) {\n  .container {\n    flex-direction: column; /* Stack elements vertically */\n  }\n}\n</code></pre>"},{"location":"frontend/css/css.html#15-common-utility-classes-custom","title":"15. Common Utility Classes (Custom)","text":"<pre><code>.text-center {\n  text-align: center; /* Center text */\n}\n\n.mt-4 {\n  margin-top: 1rem; /* Top margin */\n}\n\n.p-2 {\n  padding: 0.5rem; /* Padding */\n}\n\n.hidden {\n  display: none; /* Hide element */\n}\n</code></pre>"},{"location":"frontend/css/css.html#16-units","title":"16. Units","text":"<pre><code>/* Absolute units */\nwidth: 100px; /* Fixed width */\nfont-size: 12pt; /* Font size in points */\n\n/* Relative units */\nwidth: 50%; /* Half of parent width */\nfont-size: 1.5em; /* 1.5x parent font size */\npadding: 2rem; /* 2x root font size */\n</code></pre>"},{"location":"frontend/css/css.html#17-css-variables","title":"17. CSS Variables","text":"<pre><code>:root {\n  --main-color: #3498db; /* Define variable */\n}\n\nbutton {\n  background-color: var(--main-color); /* Use variable */\n}\n</code></pre>"},{"location":"frontend/css/css.html#18-useful-tools","title":"18. Useful Tools","text":"<ul> <li>CSS Tricks \u2013 Tips &amp; tutorials</li> <li>Can I use \u2013 Browser compatibility</li> <li>Flexbox Froggy \u2013 Game to learn Flexbox</li> <li>Grid Garden \u2013 Game to learn Grid</li> </ul>"},{"location":"frontend/css/css.html#summary","title":"Summary","text":"<p>Learn:</p> <ul> <li>How to style text and boxes</li> <li>Layout with Flexbox and Grid</li> <li>Responsive design with media queries</li> <li>Animations and hover states</li> <li>Custom utility classes and variables</li> </ul>"},{"location":"frontend/css/important1.html","title":"Advanced CSS \ud83d\ude80","text":"<p>This guide covers powerful CSS techniques beyond the basics \u2014 for developers looking to create responsive, maintainable, and modern web interfaces.</p>"},{"location":"frontend/css/important1.html#1-css-specificity-inheritance","title":"1. CSS Specificity &amp; Inheritance","text":"<pre><code>/* Inline &gt; ID &gt; Class &gt; Element */\n#title {\n  color: red; /* Highest priority among these */\n}\n\n.title {\n  color: blue;\n}\n\nh1 {\n  color: green;\n}\n</code></pre> <ul> <li>Specificity determines which rule wins if multiple apply.</li> <li>Inline styles override external/internal styles.</li> <li>Child elements can inherit styles like <code>color</code>, <code>font</code>.</li> </ul>"},{"location":"frontend/css/important1.html#2-advanced-selectors","title":"2. Advanced Selectors","text":"<pre><code>/* Attribute selector */\ninput[type=\"text\"] {\n  border: 1px solid gray;\n}\n\n/* Pseudo-classes */\nli:first-child {\n  font-weight: bold;\n}\n\n/* Pseudo-elements */\np::first-letter {\n  font-size: 2em;\n}\n\n/* Combinators */\nul &gt; li {\n  color: red;\n} /* Direct children */\ndiv + p {\n  margin-top: 10px;\n} /* Adjacent sibling */\n</code></pre>"},{"location":"frontend/css/important1.html#3-positioning-techniques","title":"3. Positioning Techniques","text":"<pre><code>.parent {\n  position: relative; /* Set parent as reference point */\n}\n\n.child {\n  position: absolute;\n  top: 10px;\n  left: 20px;\n}\n</code></pre> <ul> <li>Use <code>relative</code> on parent and <code>absolute</code> on child for precise control.</li> <li>Combine with <code>z-index</code> to control stacking order.</li> </ul>"},{"location":"frontend/css/important1.html#4-css-grid-advanced","title":"4. CSS Grid (Advanced)","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 equal columns */\n  grid-template-rows: auto 100px;\n  gap: 1rem;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar content content\";\n}\n\n.header {\n  grid-area: header;\n}\n\n.sidebar {\n  grid-area: sidebar;\n}\n\n.content {\n  grid-area: content;\n}\n</code></pre> <ul> <li>Grid areas allow semantic layout.</li> <li>Repeat, minmax, auto-fill create dynamic layouts.</li> </ul>"},{"location":"frontend/css/important1.html#5-advanced-flexbox","title":"5. Advanced Flexbox","text":"<pre><code>.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: stretch;\n}\n\n.item {\n  flex: 1 1 200px; /* Grow, shrink, base width */\n}\n</code></pre> <ul> <li><code>flex-wrap</code> allows items to wrap to next line.</li> <li><code>flex</code> shorthand lets items resize intelligently.</li> </ul>"},{"location":"frontend/css/important1.html#6-responsive-design-patterns","title":"6. Responsive Design Patterns","text":"<pre><code>@media (max-width: 768px) {\n  .nav {\n    flex-direction: column;\n  }\n}\n\n@media (min-width: 1024px) {\n  .sidebar {\n    display: block;\n  }\n}\n</code></pre> <ul> <li>Use media queries to adapt layout.</li> <li>Combine with relative units like <code>%</code>, <code>vw</code>, <code>em</code>, <code>rem</code>.</li> </ul>"},{"location":"frontend/css/important1.html#7-transitions-animations","title":"7. Transitions &amp; Animations","text":"<pre><code>.box {\n  transition: transform 0.3s ease-in-out;\n}\n\n.box:hover {\n  transform: scale(1.1);\n}\n\n/* Keyframe animation */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.pulsing {\n  animation: pulse 2s infinite;\n}\n</code></pre> <ul> <li>Use <code>@keyframes</code> to animate anything: size, opacity, position.</li> <li>Transitions are perfect for hover effects.</li> </ul>"},{"location":"frontend/css/important1.html#8-custom-properties-css-variables","title":"8. Custom Properties (CSS Variables)","text":"<pre><code>:root {\n  --main-color: #3498db;\n  --padding: 1rem;\n}\n\n.button {\n  background-color: var(--main-color);\n  padding: var(--padding);\n}\n</code></pre> <ul> <li>Variables make themes and reuse easy.</li> <li>Can be overridden in components or via JavaScript.</li> </ul>"},{"location":"frontend/css/important1.html#9-clipping-masking","title":"9. Clipping &amp; Masking","text":"<pre><code>/* Circle clipping */\n.clip {\n  clip-path: circle(50%);\n}\n\n/* Image masking */\n.mask {\n  mask-image: url(\"mask.svg\");\n}\n</code></pre> <ul> <li>Great for creative UI effects (avatars, reveals).</li> <li>Combine with animations for impact.</li> </ul>"},{"location":"frontend/css/important1.html#10-scroll-snapping","title":"10. Scroll Snapping","text":"<pre><code>.container {\n  scroll-snap-type: x mandatory;\n  overflow-x: scroll;\n  display: flex;\n}\n\n.section {\n  scroll-snap-align: start;\n  flex: 0 0 100vw;\n}\n</code></pre> <ul> <li>Smoothly scrolls between sections on mobile/web.</li> <li>Useful for sliders, carousels, sections.</li> </ul>"},{"location":"frontend/css/important1.html#11-sticky-positioning","title":"11. Sticky Positioning","text":"<pre><code>header {\n  position: sticky;\n  top: 0;\n  background: white;\n}\n</code></pre> <ul> <li>Sticks element at a scroll position.</li> <li>Great for navbars and headers.</li> </ul>"},{"location":"frontend/css/important1.html#12-advanced-z-index-strategy","title":"12. Advanced Z-Index Strategy","text":"<pre><code>.modal {\n  position: fixed;\n  z-index: 9999; /* On top */\n}\n\n.overlay {\n  z-index: 1000;\n}\n\n.content {\n  z-index: 1;\n}\n</code></pre> <ul> <li>Think in layers for complex UIs.</li> <li>Always manage z-index for modals, dropdowns, tooltips.</li> </ul>"},{"location":"frontend/css/important1.html#13-blend-modes-filters","title":"13. Blend Modes &amp; Filters","text":"<pre><code>.image {\n  mix-blend-mode: multiply;\n  filter: blur(2px) brightness(1.2);\n}\n</code></pre> <ul> <li>Create creative effects like vintage filters, hover dimming, etc.</li> <li>Combine with <code>hover</code> or <code>transition</code>.</li> </ul>"},{"location":"frontend/css/important1.html#14-aspect-ratio-modern","title":"14. Aspect Ratio (Modern)","text":"<pre><code>.video {\n  aspect-ratio: 16 / 9;\n}\n</code></pre> <ul> <li>Keeps media responsive with fixed shape.</li> <li>Supported in most modern browsers.</li> </ul>"},{"location":"frontend/css/important1.html#15-logical-properties","title":"15. Logical Properties","text":"<pre><code>padding-inline: 1rem; /* Left/right in any direction */\nmargin-block: 2rem; /* Top/bottom in writing mode */\n</code></pre> <ul> <li>Useful for RTL languages, accessibility.</li> <li>Future-proof your layouts.</li> </ul>"},{"location":"frontend/css/important1.html#summary","title":"Summary","text":"<p>\u2705 Advanced CSS gives you superpowers:</p> <ul> <li>Master layout with Grid and Flex</li> <li>Enhance UI with transitions, animations, and filters</li> <li>Build responsive, theme-able designs with variables</li> <li>Handle layering, clipping, and sticky headers</li> <li>Use logical properties for multilingual support</li> </ul> <p>Level up by exploring SASS, Tailwind, BEM, CSS-in-JS, and modern design systems.</p>"},{"location":"frontend/css/toolcss.html","title":"\ud83c\udfae Learn CSS Through Games","text":"<p>Learning CSS can be challenging \u2014 so why not make it fun? Here are some of the best interactive games to master CSS basics and advanced concepts.</p>"},{"location":"frontend/css/toolcss.html#flexbox-froggy","title":"\ud83e\udde9 Flexbox Froggy","text":"<p>Practice Flexbox layout with frogs!</p> <p>\ud83d\udd17 Play Flexbox Froggy</p> <ul> <li>Learn properties like <code>justify-content</code>, <code>align-items</code>, <code>flex-direction</code>, etc.</li> <li>24 levels that build up in difficulty.</li> </ul>"},{"location":"frontend/css/toolcss.html#grid-garden","title":"\ud83e\udde9 Grid Garden","text":"<p>Grow your CSS Grid skills!</p> <p>\ud83d\udd17 Play Grid Garden</p> <ul> <li>Use <code>grid-column</code>, <code>grid-row</code>, and <code>grid-area</code> to water your garden.</li> <li>Great for understanding grid lines and layout placement.</li> </ul>"},{"location":"frontend/css/toolcss.html#css-diner","title":"\ud83c\udf7d\ufe0f CSS Diner","text":"<p>Master CSS Selectors while selecting food on a table!</p> <p>\ud83d\udd17 Play CSS Diner</p> <ul> <li>Covers basic to advanced CSS selectors like <code>.class</code>, <code>#id</code>, <code>nth-child</code>, and more.</li> </ul>"},{"location":"frontend/css/toolcss.html#css-speedrun","title":"\u23f1\ufe0f CSS Speedrun","text":"<p>A fast-paced game to test your CSS selector knowledge.</p> <p>\ud83d\udd17 Play CSS Speedrun</p> <ul> <li>Race against the clock by writing accurate selectors.</li> <li>Instant feedback and scoring.</li> </ul>"},{"location":"frontend/css/toolcss.html#cssbattle","title":"\ud83c\udfa8 CSSBattle","text":"<p>Code golf with CSS \u2014 replicate visuals using the least code.</p> <p>\ud83d\udd17 Play CSSBattle</p> <ul> <li>Practice layout, positioning, shapes, and creative CSS.</li> <li>Compete against others on the leaderboard.</li> </ul>"},{"location":"frontend/css/toolcss.html#bonus-tools","title":"\ud83d\udee0\ufe0f Bonus Tools","text":"<p>Try out CSS in real time using these interactive playgrounds:</p> <ul> <li>\ud83d\udd17 JSFiddle</li> <li>\ud83d\udd17 PlayCode</li> </ul>"},{"location":"frontend/html/html.html","title":"HTML Basics","text":"<p>This guide walks you through the fundamentals of HTML \u2014 the standard language for building web pages.</p>"},{"location":"frontend/html/html.html#1-what-is-html","title":"1. What is HTML?","text":"<p>HTML (HyperText Markup Language) is used to structure content on the web. It uses tags to define elements.</p> <p>Example of a simple HTML document:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"frontend/html/html.html#2-basic-tags","title":"2. Basic Tags","text":"Tag Purpose <code>&lt;h1&gt;</code> Headings (from <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>) <code>&lt;p&gt;</code> Paragraph <code>&lt;a&gt;</code> Anchor (links) <code>&lt;img&gt;</code> Image <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code> Unordered list + list items <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code> Ordered list + list items <code>&lt;div&gt;</code> Block container <code>&lt;span&gt;</code> Inline container"},{"location":"frontend/html/html.html#3-headings","title":"3. Headings","text":"<pre><code>&lt;h1&gt;Main Heading&lt;/h1&gt;\n&lt;h2&gt;Subheading&lt;/h2&gt;\n&lt;h3&gt;Smaller heading&lt;/h3&gt;\n</code></pre> <p>Use only one <code>&lt;h1&gt;</code> per page for accessibility and SEO.</p>"},{"location":"frontend/html/html.html#4-paragraphs-line-breaks","title":"4. Paragraphs &amp; Line Breaks","text":"<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;p&gt;This is another paragraph.&lt;/p&gt;\n&lt;br /&gt;\n&lt;p&gt;Break above!&lt;/p&gt;\n</code></pre>"},{"location":"frontend/html/html.html#5-links-a","title":"5. Links (<code>&lt;a&gt;</code>)","text":"<pre><code>&lt;a href=\"https://example.com\"&gt;Visit Example&lt;/a&gt;\n&lt;a href=\"#top\"&gt;Go to Top&lt;/a&gt;\n&lt;a href=\"mailto:someone@example.com\"&gt;Send Email&lt;/a&gt;\n</code></pre>"},{"location":"frontend/html/html.html#6-images-img","title":"6. Images (<code>&lt;img&gt;</code>)","text":"<pre><code>&lt;img src=\"image.jpg\" alt=\"Description\" width=\"300\" /&gt;\n</code></pre> <ul> <li><code>alt</code>: Describes the image (important for accessibility)</li> <li><code>width</code> and <code>height</code>: Set size</li> </ul>"},{"location":"frontend/html/html.html#7-lists","title":"7. Lists","text":"<pre><code>&lt;ul&gt;\n  &lt;li&gt;Milk&lt;/li&gt;\n  &lt;li&gt;Eggs&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"frontend/html/html.html#8-containers-div-and-span","title":"8. Containers: <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code>","text":"<pre><code>&lt;div&gt;\n  &lt;h2&gt;Section&lt;/h2&gt;\n  &lt;p&gt;This content is grouped together.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;p&gt;This is &lt;span style=\"color: red;\"&gt;inline&lt;/span&gt; text.&lt;/p&gt;\n</code></pre> <ul> <li><code>&lt;div&gt;</code> = block-level</li> <li><code>&lt;span&gt;</code> = inline</li> </ul>"},{"location":"frontend/html/html.html#9-forms","title":"9. Forms","text":"<pre><code>&lt;form action=\"/submit\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"username\" /&gt;\n  &lt;input type=\"password\" name=\"password\" /&gt;\n  &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Other common input types: <code>email</code>, <code>checkbox</code>, <code>radio</code>, <code>file</code>, <code>submit</code>.</p>"},{"location":"frontend/html/html.html#10-tables","title":"10. Tables","text":"<pre><code>&lt;table border=\"1\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Age&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alice&lt;/td&gt;\n    &lt;td&gt;25&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"frontend/html/html.html#11-semantic-elements","title":"11. Semantic Elements","text":"<p>HTML5 added semantic tags that describe meaning:</p> Tag Purpose <code>&lt;header&gt;</code> Page or section header <code>&lt;nav&gt;</code> Navigation menu <code>&lt;main&gt;</code> Main content <code>&lt;section&gt;</code> Thematic section <code>&lt;article&gt;</code> Self-contained content <code>&lt;footer&gt;</code> Footer of page/section"},{"location":"frontend/html/html.html#12-comments","title":"12. Comments","text":"<pre><code>&lt;!-- This is a comment --&gt;\n</code></pre>"},{"location":"frontend/html/html.html#13-file-structure-best-practices","title":"13. File Structure Best Practices","text":"<pre><code>project/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 style.css\n\u2514\u2500\u2500 script.js\n</code></pre> <p>Linking files:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"frontend/html/html.html#14-classes-and-ids","title":"14. Classes and IDs","text":"<pre><code>&lt;div id=\"header\" class=\"container main-header\"&gt;\n  &lt;p class=\"title\"&gt;Welcome&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li><code>id</code>: Unique identifier (one per page)</li> <li><code>class</code>: Reusable styling group</li> </ul>"},{"location":"frontend/html/html.html#summary","title":"Summary","text":"<p>HTML is the foundation of every webpage. Learn these key concepts:</p> <ul> <li>Page structure and tags</li> <li>Text, images, links</li> <li>Lists, forms, and tables</li> <li>Semantic HTML and accessibility</li> <li>Classes and IDs</li> </ul> <p>Once you're confident with HTML, pair it with CSS for styling and JavaScript for interactivity.</p>"},{"location":"frontend/html/htmltool.html","title":"\ud83c\udfae Learn HTML Through Games","text":"<p>HTML is the foundation of the web. These games and challenges will help you learn and practice HTML in a fun, engaging way!</p>"},{"location":"frontend/html/htmltool.html#html-academy","title":"\ud83c\udfd7\ufe0f HTML Academy","text":"<p>Interactive step-by-step HTML lessons.</p> <p>\ud83d\udd17 Play HTML Academy</p> <ul> <li>Build webpages by writing real HTML.</li> <li>Free beginner and advanced tracks.</li> <li>Includes tasks and visual feedback.</li> </ul>"},{"location":"frontend/html/htmltool.html#w3schools-html-quiz","title":"\ud83d\udd24 W3Schools HTML Quiz","text":"<p>Test your HTML knowledge with quizzes and mini-games.</p> <p>\ud83d\udd17 Take W3Schools HTML Quiz</p> <ul> <li>Covers tags, structure, attributes, forms.</li> <li>Instant feedback and explanations.</li> </ul>"},{"location":"frontend/html/htmltool.html#bonus-tools","title":"\ud83d\udd0d Bonus Tools","text":"<p>Practice and experiment with these online HTML playgrounds:</p> <ul> <li>\ud83d\udd17 JSFiddle</li> <li>\ud83d\udd17 PlayCode</li> </ul>"},{"location":"frontend/js/index.html","title":"JavaScript Overview","text":"<p>This guide gives you a clear and easy-to-understand overview of JavaScript \u2014 from what it is to what it can do.</p>"},{"location":"frontend/js/index.html#1-what-is-javascript","title":"1. What is JavaScript?","text":"<p>JavaScript (JS) is a popular programming language used to make websites interactive. Along with HTML and CSS, it\u2019s one of the main tools used to build web pages.</p>"},{"location":"frontend/js/index.html#2-why-javascript-is-useful","title":"2. Why JavaScript is Useful","text":"<ul> <li>Runs in Your Browser: JavaScript lets websites respond to what you do \u2014 like clicking a button, typing in a form, or moving your mouse.</li> <li>Works Everywhere: It\u2019s not just for websites! You can use JavaScript to:</li> <li>Build web servers (with Node.js)</li> <li>Create mobile apps (with React Native)</li> <li>Make desktop apps (with Electron)</li> </ul>"},{"location":"frontend/js/index.html#3-key-features","title":"3. Key Features","text":"<ul> <li>No Need to Declare Types: You can write <code>let x = 5;</code> and later change it to <code>x = \"hello\";</code>. JavaScript won\u2019t complain!</li> <li>Functions are Flexible: You can treat functions like values \u2014 pass them around, return them from other functions, and store them in variables.</li> <li>Objects Inherit from Objects: Instead of using classes like in other languages, JavaScript uses something called prototypes. (Don't worry \u2014 ES6 added classes to make it easier!)</li> <li>Great at Handling Events: JavaScript is designed to deal with things happening on the page \u2014 like clicks, typing, or loading data from a server \u2014 without freezing or slowing down.</li> </ul>"},{"location":"frontend/js/index.html#4-ecmascript-es-the-standard","title":"4. ECMAScript (ES) - The Standard","text":"<p>JavaScript is based on a set of rules called ECMAScript. New versions (like ES6, ES7, etc.) add cool new features to make coding easier and more powerful.</p>"},{"location":"frontend/js/Basics.html","title":"JavaScript Basics","text":"<p>This guide covers the core building blocks of JavaScript \u2014 perfect for beginners!</p>"},{"location":"frontend/js/Basics.html#1-variables","title":"1. Variables","text":"<p>Variables store data.</p> <pre><code>let name = \"Alice\"; // Can change\nconst age = 25; // Can't change\nvar city = \"London\"; // Old way (not recommended)\n</code></pre> <ul> <li><code>let</code> and <code>const</code> are the modern way to create variables.</li> <li>Use <code>const</code> by default, unless you need to change the value.</li> </ul>"},{"location":"frontend/js/Basics.html#2-data-types","title":"2. Data Types","text":"<p>JavaScript has different types of data:</p> <pre><code>let text = \"hello\"; // String\nlet number = 42; // Number\nlet isHappy = true; // Boolean\nlet nothing = null; // Null\nlet notSet; // Undefined\nlet person = { name: \"Tom\" }; // Object\nlet list = [1, 2, 3]; // Array\n</code></pre>"},{"location":"frontend/js/Basics.html#3-operators","title":"3. Operators","text":"<pre><code>// Arithmetic\n5 + 3; // 8\n10 - 4; // 6\n6 * 2; // 12\n9 / 3; // 3\n\n// Comparison\n5 == \"5\"; // true (loose)\n5 === \"5\"; // false (strict)\n4 !== 5; // true\n\n// Logical\ntrue &amp;&amp; false; // false\ntrue || false; // true\n!true; // false\n</code></pre>"},{"location":"frontend/js/Basics.html#4-functions","title":"4. Functions","text":"<p>Functions are blocks of code you can reuse.</p> <pre><code>function greet(name) {\n  return \"Hello, \" + name;\n}\n\nconst sayHi = (name) =&gt; \"Hi, \" + name;\n\ngreet(\"Alice\"); // \"Hello, Alice\"\n</code></pre>"},{"location":"frontend/js/Basics.html#5-conditionals","title":"5. Conditionals","text":"<p>Run code based on conditions.</p> <pre><code>let age = 18;\n\nif (age &gt;= 18) {\n  console.log(\"You're an adult\");\n} else {\n  console.log(\"You're a minor\");\n}\n</code></pre>"},{"location":"frontend/js/Basics.html#6-loops","title":"6. Loops","text":"<p>Repeat code multiple times.</p> <pre><code>// For loop\nfor (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}\n\n// While loop\nlet i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"frontend/js/Basics.html#7-arrays","title":"7. Arrays","text":"<p>Store multiple values.</p> <pre><code>let fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(fruits[0]); // \"apple\"\nfruits.push(\"orange\"); // Add to end\n</code></pre>"},{"location":"frontend/js/Basics.html#8-objects","title":"8. Objects","text":"<p>Group related data together.</p> <pre><code>let person = {\n  name: \"Bob\",\n  age: 30,\n  isStudent: false,\n};\n\nconsole.log(person.name); // \"Bob\"\n</code></pre>"},{"location":"frontend/js/Basics.html#9-events","title":"9. Events","text":"<p>React to things like clicks.</p> <pre><code>&lt;button onclick=\"sayHello()\"&gt;Click me&lt;/button&gt;\n\n&lt;script&gt;\n  function sayHello() {\n    alert(\"Hello!\");\n  }\n&lt;/script&gt;\n</code></pre>"},{"location":"frontend/js/Basics.html#10-dom-manipulation","title":"10. DOM Manipulation","text":"<p>Change the web page with JavaScript.</p> <pre><code>&lt;p id=\"demo\"&gt;Hello&lt;/p&gt;\n\n&lt;script&gt;\n  document.getElementById(\"demo\").textContent = \"Changed!\";\n&lt;/script&gt;\n</code></pre>"},{"location":"frontend/js/Basics.html#11-asynchronous-code","title":"11. Asynchronous Code","text":"<p>Wait for things like data from a server.</p> <pre><code>// Using Promises\nfetch(\"https://api.example.com\")\n  .then((response) =&gt; response.json())\n  .then((data) =&gt; console.log(data));\n\n// Using async/await\nasync function getData() {\n  const response = await fetch(\"https://api.example.com\");\n  const data = await response.json();\n  console.log(data);\n}\n</code></pre>"},{"location":"frontend/js/Basics.html#summary","title":"Summary","text":"<p>JavaScript helps you make websites interactive. Learn these basics well:</p> <ul> <li>Variables &amp; Data Types</li> <li>Functions &amp; Loops</li> <li>Conditions &amp; Operators</li> <li>Arrays &amp; Objects</li> <li>DOM &amp; Events</li> <li>Async code</li> </ul> <p>Once you're comfortable, explore more advanced stuff like ES6+, modules, and frameworks (React, Vue, etc.).</p>"},{"location":"frontend/js/ES6.html","title":"ES6 Features","text":""},{"location":"frontend/js/ES6.html#1-let-and-const","title":"1. let and const","text":"<pre><code>let x = 10;\nconst y = 20;\n</code></pre>"},{"location":"frontend/js/ES6.html#2-arrow-functions","title":"2. Arrow Functions","text":"<pre><code>const greet = (name) =&gt; `Hello, ${name}`;\n</code></pre>"},{"location":"frontend/js/ES6.html#3-template-literals","title":"3. Template Literals","text":"<pre><code>let name = \"Alice\";\nconsole.log(`Hi, ${name}!`);\n</code></pre>"},{"location":"frontend/js/ES6.html#4-destructuring","title":"4. Destructuring","text":"<pre><code>const user = { name: \"Bob\", age: 25 };\nconst { name, age } = user;\n</code></pre>"},{"location":"frontend/js/ES6.html#5-spread-and-rest","title":"5. Spread and Rest","text":"<pre><code>// Spread\nlet nums = [1, 2, 3];\nlet copy = [...nums];\n\n// Rest\nfunction sum(...args) {\n  return args.reduce((a, b) =&gt; a + b);\n}\n</code></pre>"},{"location":"frontend/js/ES6.html#6-default-parameters","title":"6. Default Parameters","text":"<pre><code>function greet(name = \"Guest\") {\n  return `Hi, ${name}`;\n}\n</code></pre>"},{"location":"frontend/js/ES6.html#7-classes","title":"7. Classes","text":"<pre><code>class Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    return `Hi, I'm ${this.name}`;\n  }\n}\n</code></pre>"},{"location":"frontend/js/ES6.html#8-promises","title":"8. Promises","text":"<p>Covered in detail in the Promises file.</p>"},{"location":"frontend/js/ErrorHandling.html","title":"Practical JavaScript Error Handling","text":"<p>A focused guide on modern error handling in JavaScript \u2014 how to use <code>try...catch</code>, custom errors, and ensure your code is stable in real-world scenarios.</p>"},{"location":"frontend/js/ErrorHandling.html#1-trycatch","title":"1. try...catch","text":""},{"location":"frontend/js/ErrorHandling.html#11-basic-syntax","title":"1.1 Basic Syntax","text":"<pre><code>try {\n  // Code that might throw an error\n} catch (error) {\n  // Code to handle the error\n}\n</code></pre>"},{"location":"frontend/js/ErrorHandling.html#12-example","title":"1.2 Example","text":"<pre><code>try {\n  let data = JSON.parse('{\"name\": \"Alice\"}');\n  console.log(data.name); // Alice\n} catch (err) {\n  console.error(\"Invalid JSON!\", err.message);\n}\n</code></pre>"},{"location":"frontend/js/ErrorHandling.html#2-what-triggers-catch","title":"2. What Triggers catch?","text":"<ul> <li>\u274c Syntax errors outside the try block are not caught.</li> <li>\u2705 Runtime errors inside the try block are caught.</li> </ul> <pre><code>try {\n  let result = riskyFunction();\n} catch (err) {\n  console.error(\"Something went wrong:\", err);\n}\n</code></pre>"},{"location":"frontend/js/ErrorHandling.html#3-finally-block","title":"3. finally Block","text":"<p>Always runs \u2014 whether there's an error or not. Use it for cleanup.</p> <pre><code>try {\n  console.log(\"Trying...\");\n  throw new Error(\"Oops!\");\n} catch (err) {\n  console.error(\"Caught:\", err.message);\n} finally {\n  console.log(\"Cleanup done\");\n}\n</code></pre> <p>Output:</p> <pre><code>Trying...\nCaught: Oops!\nCleanup done\n</code></pre>"},{"location":"frontend/js/ErrorHandling.html#4-throwing-custom-errors","title":"4. Throwing Custom Errors","text":""},{"location":"frontend/js/ErrorHandling.html#41-manually-throw","title":"4.1 Manually Throw","text":"<pre><code>function divide(a, b) {\n  if (b === 0) {\n    throw new Error(\"Cannot divide by zero\");\n  }\n  return a / b;\n}\n\ntry {\n  divide(4, 0);\n} catch (e) {\n  console.error(e.message); // \"Cannot divide by zero\"\n}\n</code></pre>"},{"location":"frontend/js/ErrorHandling.html#5-best-practices","title":"5. Best Practices","text":"<ul> <li>\u2705 Use <code>try...catch</code> for:</li> <li>JSON parsing</li> <li>Network/API calls</li> <li>Code that uses 3rd-party libraries</li> <li>\u274c Don\u2019t swallow errors silently:</li> </ul> <pre><code>catch (e) {\n  // bad: nothing logged\n}\n</code></pre> <ul> <li>\u2705 Log or rethrow unknown errors for debugging.</li> <li>\u2705 Use custom error types to distinguish logic vs technical failures.</li> </ul>"},{"location":"frontend/js/ErrorHandling.html#summary","title":"Summary","text":"<p>Solid error handling makes your code:</p> <ul> <li>Stable</li> <li>Debuggable</li> <li>Ready for production</li> <li>Friendly to users</li> </ul> <p>Mastering <code>try...catch</code> gives you more control and trust over your apps.</p>"},{"location":"frontend/js/important.html","title":"Practical Advanced JavaScript","text":"<p>A focused guide on essential advanced features used in modern web development. No fluff \u2014 just what you\u2019ll actually use in projects.</p>"},{"location":"frontend/js/important.html#1-logical-operators","title":"1. Logical Operators: <code>&amp;&amp;</code>, <code>||</code>, <code>??</code>","text":""},{"location":"frontend/js/important.html#11-and","title":"1.1 <code>&amp;&amp;</code> (AND)","text":"<p>Returns the first falsy or the last truthy value.</p> <pre><code>isLoggedIn &amp;&amp; showDashboard();\n</code></pre> <p>Use for: conditional execution.</p>"},{"location":"frontend/js/important.html#12-or","title":"1.2 <code>||</code> (OR)","text":"<p>Returns the first truthy value.</p> <pre><code>const name = inputName || \"Guest\";\n</code></pre> <p>Use for: setting fallback/default values.</p>"},{"location":"frontend/js/important.html#13-nullish-coalescing","title":"1.3 <code>??</code> (Nullish Coalescing)","text":"<p>Returns the right-hand value only if the left is null or undefined.</p> <pre><code>const title = post.title ?? \"Untitled\";\n</code></pre> <p>Use when empty strings or 0 are valid values.</p>"},{"location":"frontend/js/important.html#2-optional-chaining","title":"2. Optional Chaining ?.","text":"<p>Safe access to nested properties.</p> <pre><code>const city = user?.address?.city;\nconst result = callback?.(data);\n</code></pre>"},{"location":"frontend/js/important.html#3-ternary-operator","title":"3. Ternary Operator ?:","text":"<p>Shorthand for if-else.</p> <pre><code>const access = isAdmin ? \"Full\" : \"Limited\";\n</code></pre> <p>Can also be nested, but avoid deep nesting.</p>"},{"location":"frontend/js/important.html#4-short-circuit-evaluation","title":"4. Short-Circuit Evaluation","text":"<pre><code>const log = (msg) =&gt; console.log(msg);\nlet debug = true;\n\ndebug &amp;&amp; log(\"Debug mode on\"); // runs only if debug is true\n</code></pre>"},{"location":"frontend/js/important.html#5-array-methods-detailed","title":"5. Array Methods (Detailed)","text":""},{"location":"frontend/js/important.html#51-map-transform-each-element","title":"5.1 <code>.map()</code> \u2013 Transform Each Element","text":"<p>Purpose: Transforms each element of an array and returns a new array of the same length.</p> <pre><code>const numbers = [1, 2, 3];\nconst squares = numbers.map((x) =&gt; x * x);\nconsole.log(squares); // [1, 4, 9]\n</code></pre> <p>Use Case Examples:</p> <ul> <li>Convert values (e.g. Celsius to Fahrenheit)</li> <li>Extract fields from objects</li> <li>Reformat data</li> </ul> <pre><code>const users = [{ name: \"Alice\" }, { name: \"Bob\" }, { name: \"Charlie\" }];\n\nconst names = users.map((user) =&gt; user.name);\nconsole.log(names); // [\"Alice\", \"Bob\", \"Charlie\"]\n</code></pre>"},{"location":"frontend/js/important.html#52-filter-select-matching-elements","title":"5.2 <code>.filter()</code> \u2013 Select Matching Elements","text":"<p>Purpose: Returns a new array that contains only the elements that pass the truth test you provide.</p> <pre><code>const nums = [1, 2, 3, 4, 5, 6];\nconst even = nums.filter((n) =&gt; n % 2 === 0);\nconsole.log(even); // [2, 4, 6]\n</code></pre> <p>Use Case Examples:</p> <ul> <li>Filter by a condition (e.g. status === 'active')</li> <li>Remove falsy values</li> <li>Select items that match user input (search/filter)</li> </ul> <pre><code>const products = [\n  { name: \"Laptop\", inStock: true },\n  { name: \"Phone\", inStock: false },\n];\n\nconst available = products.filter((p) =&gt; p.inStock);\nconsole.log(available); // [{ name: \"Laptop\", inStock: true }]\n</code></pre>"},{"location":"frontend/js/important.html#53-reduce-accumulate-values","title":"5.3 <code>.reduce()</code> \u2013 Accumulate Values","text":"<p>Purpose: Iterates through the array and reduces it to a single value (e.g. sum, average, object).</p> <pre><code>const nums = [1, 2, 3, 4];\nconst total = nums.reduce((sum, n) =&gt; sum + n, 0);\nconsole.log(total); // 10\n</code></pre> <p>Syntax:</p> <pre><code>array.reduce((accumulator, currentValue) =&gt; {\n  return updatedAccumulator;\n}, initialValue);\n</code></pre> <p>Use Case Examples:</p> <ul> <li>Sum or average numbers</li> <li>Count occurrences</li> <li>Group items by key</li> <li>Flatten arrays</li> </ul> <pre><code>const votes = [\"yes\", \"no\", \"yes\", \"yes\"];\nconst count = votes.reduce((acc, vote) =&gt; {\n  acc[vote] = (acc[vote] || 0) + 1;\n  return acc;\n}, {});\n\nconsole.log(count); // { yes: 3, no: 1 }\n</code></pre>"},{"location":"frontend/js/important.html#when-to-use-each","title":"When to Use Each","text":"Method Purpose Returns Common Use <code>.map()</code> Transform every element New array Format, extract, modify <code>.filter()</code> Include elements matching a test Filtered array Search, conditionally display <code>.reduce()</code> Condense to one result Single value Total, summary, grouped object"},{"location":"frontend/js/important.html#summary","title":"Summary","text":"<p>These patterns make your code:</p> <ul> <li>Safer</li> <li>Shorter</li> <li>Easier to maintain</li> <li>Professional and ready for real-world use</li> </ul> <p>Master these and you'll be solid for frontend frameworks, Node.js, and API-based work.</p>"},{"location":"frontend/js/important2.html","title":"\ud83d\udd04 JavaScript Event Loop Explained","text":"<p>Understanding the event loop is essential for writing responsive, non-blocking JavaScript \u2014 whether in the browser or Node.js.</p>"},{"location":"frontend/js/important2.html#1-javascript-runtime-a-quick-overview","title":"1. JavaScript Runtime: A Quick Overview","text":"<p>JavaScript runs in a single-threaded environment. It can only execute one task at a time. So how does it handle things like timers, API calls, and user interactions without freezing?</p> <p>\ud83d\udc49 That\u2019s where the event loop comes in.</p>"},{"location":"frontend/js/important2.html#2-core-components-of-the-event-loop","title":"2. Core Components of the Event Loop","text":""},{"location":"frontend/js/important2.html#21-call-stack","title":"2.1 Call Stack","text":"<p>The call stack keeps track of function execution.</p> <ul> <li>Operates in a LIFO (Last-In, First-Out) manner</li> <li>If it's busy, nothing else can run</li> </ul> <pre><code>function greet() {\n  console.log(\"Hello\");\n}\n\ngreet(); // 'greet' is pushed to the stack, executed, then popped off\n</code></pre>"},{"location":"frontend/js/important2.html#22-web-apis-browser-or-node-apis","title":"2.2 Web APIs (Browser or Node APIs)","text":"<p>These are APIs provided by the environment (e.g., browser or Node.js) to handle asynchronous operations.</p> <p>Examples:</p> <ul> <li><code>setTimeout</code></li> <li><code>fetch</code> / AJAX</li> <li>DOM events</li> </ul> <pre><code>setTimeout(() =&gt; {\n  console.log(\"Timeout!\");\n}, 0);\n</code></pre> <p>This doesn't immediately go to the call stack \u2014 it gets handed off to the Web API environment.</p>"},{"location":"frontend/js/important2.html#23-callback-queue-aka-task-queue","title":"2.3 Callback Queue (aka Task Queue)","text":"<p>Holds asynchronous callbacks like:</p> <ul> <li><code>setTimeout</code></li> <li><code>setInterval</code></li> <li>DOM event handlers</li> </ul> <p>Once the call stack is clear, the event loop moves the first task from this queue to the call stack.</p>"},{"location":"frontend/js/important2.html#24-microtask-queue","title":"2.4 Microtask Queue","text":"<p>A higher-priority queue for microtasks like:</p> <ul> <li><code>Promise.then()</code></li> <li><code>queueMicrotask()</code></li> <li><code>MutationObserver</code></li> </ul> <p>Microtasks run after the current task, but before anything in the callback queue.</p> <pre><code>Promise.resolve().then(() =&gt; {\n  console.log(\"Promise resolved\");\n});\n\nsetTimeout(() =&gt; {\n  console.log(\"Timeout\");\n}, 0);\n\n// Output:\n// Promise resolved\n// Timeout\n</code></pre>"},{"location":"frontend/js/important2.html#3-event-loop-in-action","title":"3. Event Loop in Action","text":""},{"location":"frontend/js/important2.html#sample-code","title":"Sample Code:","text":"<pre><code>console.log(\"Start\");\n\nsetTimeout(() =&gt; {\n  console.log(\"Timeout\");\n}, 0);\n\nPromise.resolve().then(() =&gt; {\n  console.log(\"Promise\");\n});\n\nconsole.log(\"End\");\n</code></pre>"},{"location":"frontend/js/important2.html#output","title":"Output:","text":"<pre><code>Start\nEnd\nPromise\nTimeout\n</code></pre>"},{"location":"frontend/js/important2.html#why","title":"Why?","text":"<ol> <li><code>console.log(\"Start\")</code> and <code>console.log(\"End\")</code> run first (synchronous).</li> <li>The <code>Promise</code> callback is placed in the microtask queue.</li> <li><code>setTimeout</code> callback is queued in the callback queue.</li> <li>After the call stack clears, microtasks run first, followed by callbacks.</li> </ol>"},{"location":"frontend/js/important2.html#4-how-the-event-loop-works-visual-summary","title":"4. How the Event Loop Works (Visual Summary)","text":"<ol> <li>JS runs synchronously \u2014 line by line.</li> <li>Async tasks (like <code>setTimeout</code>, <code>fetch</code>) go to Web APIs.</li> <li>Their callbacks are placed in:</li> <li>Microtask Queue (Promises, <code>queueMicrotask</code>)</li> <li>Callback Queue (Timers, DOM events)</li> <li>The event loop:</li> <li>Waits for the call stack to be empty</li> <li>Runs all microtasks</li> <li>Then executes one task from the callback queue</li> <li>Repeat.</li> </ol>"},{"location":"frontend/js/important2.html#5-why-it-matters","title":"5. Why It Matters","text":"<ul> <li>Avoid blocking the call stack (e.g., large loops, sync XHR).</li> <li>Understand why Promises resolve before timeouts.</li> <li>Debug async behavior like race conditions or timing bugs.</li> <li>Master frameworks (like React, Vue, Node.js) more effectively.</li> </ul>"},{"location":"frontend/js/important2.html#video-visualizing-the-event-loop","title":"Video: Visualizing the Event Loop","text":"<p>Here\u2019s a fantastic visual explanation from JSConf:</p> JavaScript Event Loop - Philip Roberts (JSConf)"},{"location":"frontend/js/important2.html#summary","title":"Summary","text":"<p>The JavaScript event loop allows:</p> <ul> <li>Efficient execution of async tasks</li> <li>Smooth handling of Promises and <code>async/await</code></li> <li>Responsive, non-blocking code</li> </ul>"},{"location":"frontend/js/jstool.html","title":"\ud83c\udfae Learn JavaScript Through Games","text":"<p>JavaScript is essential for making web pages interactive. These games will help you learn and practice JavaScript in a fun and hands-on way!</p>"},{"location":"frontend/js/jstool.html#elevator-saga","title":"\ud83e\uddea Elevator Saga","text":"<p>Optimize JavaScript code to control elevators.</p> <p>\ud83d\udd17 Play Elevator Saga</p> <ul> <li>Teaches performance optimization and asynchronous logic.</li> <li>Great for understanding events, loops, and state.</li> </ul>"},{"location":"frontend/js/jstool.html#checkio","title":"\ud83e\udde9 CheckiO","text":"<p>Solve JS puzzles and challenges with others.</p> <p>\ud83d\udd17 Play CheckiO</p> <ul> <li>Levels focus on problem-solving and algorithms.</li> <li>Offers hints and community discussions for each puzzle.</li> </ul>"},{"location":"frontend/js/jstool.html#codewars","title":"\ud83d\ude80 CodeWars","text":"<p>Level up by solving JS coding challenges (katas).</p> <p>\ud83d\udd17 Play CodeWars</p> <ul> <li>Choose challenges by difficulty.</li> <li>Learn from others\u2019 solutions and improve your code quality.</li> </ul>"},{"location":"frontend/js/jstool.html#warriorjs-cli-game","title":"\ud83d\udd79\ufe0f WarriorJS (CLI Game)","text":"<p>JavaScript adventure in your terminal!</p> <p>\ud83d\udd17 Play WarriorJS</p> <ul> <li>Installable via npm (<code>npm install -g @warriorjs/cli</code>).</li> <li>Play as a warrior and solve dungeons with code logic.</li> </ul>"},{"location":"frontend/js/jstool.html#javascript-playgrounds","title":"\ud83d\udee0\ufe0f JavaScript Playgrounds","text":"<p>Try out JavaScript interactively:</p> <ul> <li>\ud83d\udd17 JSFiddle</li> <li>\ud83d\udd17 PlayCode</li> </ul>"},{"location":"frontend/js/promises.html","title":"JavaScript Promises","text":""},{"location":"frontend/js/promises.html#1-what-is-a-promise","title":"1- What is a Promise?","text":"<p>A Promise is an object that represents a task that might complete in the future.</p>"},{"location":"frontend/js/promises.html#2-states-of-a-promise","title":"2- States of a Promise","text":"<ul> <li>Pending: still waiting</li> <li>Fulfilled: completed successfully</li> <li>Rejected: failed</li> </ul>"},{"location":"frontend/js/promises.html#3-creating-a-promise","title":"3- Creating a Promise","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  let success = true;\n  if (success) {\n    resolve(\"It worked!\");\n  } else {\n    reject(\"It failed.\");\n  }\n});\n</code></pre>"},{"location":"frontend/js/promises.html#4-using-promises","title":"4- Using Promises","text":"<pre><code>promise\n  .then((result) =&gt; console.log(result))\n  .catch((error) =&gt; console.error(error));\n</code></pre>"},{"location":"frontend/js/promises.html#5-chaining-promises","title":"5- Chaining Promises","text":"<pre><code>fetch(\"https://api.example.com\")\n  .then((res) =&gt; res.json())\n  .then((data) =&gt; console.log(data))\n  .catch((err) =&gt; console.error(err));\n</code></pre>"},{"location":"frontend/js/storage.html","title":"JavaScript localStorage Explained","text":"<p><code>localStorage</code> allows you to store key-value data in a user's browser \u2014 persistently, even after the page reloads or the browser is closed.</p>"},{"location":"frontend/js/storage.html#1-what-is-localstorage","title":"1. What is <code>localStorage</code>?","text":"<ul> <li>Part of the Web Storage API</li> <li>Stores string key-value pairs</li> <li>Synchronous and stored per origin</li> <li>Persistent: stays until explicitly cleared</li> </ul> <p>\ud83d\udcdd Each origin (domain + protocol + port) gets up to 5\u201310MB of storage.</p>"},{"location":"frontend/js/storage.html#2-basic-usage","title":"2. Basic Usage","text":""},{"location":"frontend/js/storage.html#set-an-item","title":"Set an Item","text":"<pre><code>localStorage.setItem(\"username\", \"john_doe\");\n</code></pre>"},{"location":"frontend/js/storage.html#get-an-item","title":"Get an Item","text":"<pre><code>const name = localStorage.getItem(\"username\");\nconsole.log(name); // \"john_doe\"\n</code></pre>"},{"location":"frontend/js/storage.html#remove-an-item","title":"Remove an Item","text":"<pre><code>localStorage.removeItem(\"username\");\n</code></pre>"},{"location":"frontend/js/storage.html#clear-all-items","title":"Clear All Items","text":"<pre><code>localStorage.clear(); // \u26a0\ufe0f removes everything for this origin\n</code></pre>"},{"location":"frontend/js/storage.html#3-important-notes","title":"3. Important Notes","text":"<ul> <li>All data is stored as strings.</li> <li>You must serialize/deserialize complex data types like objects or arrays.</li> </ul> <pre><code>const user = { name: \"Alice\", age: 30 };\n\n// Save\nlocalStorage.setItem(\"user\", JSON.stringify(user));\n\n// Retrieve\nconst savedUser = JSON.parse(localStorage.getItem(\"user\"));\nconsole.log(savedUser.name); // \"Alice\"\n</code></pre>"},{"location":"frontend/js/storage.html#4-when-to-use-localstorage","title":"4. When to Use <code>localStorage</code>","text":"<p>Use it for:</p> <ul> <li>Saving UI preferences (e.g. theme, layout)</li> <li>Caching small amounts of data</li> <li>Storing tokens (\u26a0\ufe0f but beware of XSS risks)</li> </ul> <p>Avoid for:</p> <ul> <li>Sensitive data (use httpOnly cookies for auth tokens)</li> <li>Large datasets</li> <li>Syncing across tabs (use <code>storage</code> event or other techniques)</li> </ul>"},{"location":"frontend/js/storage.html#5-example-theme-switcher","title":"5. Example: Theme Switcher","text":"<pre><code>// Check stored theme\nconst theme = localStorage.getItem(\"theme\");\nif (theme) {\n  document.body.classList.add(theme);\n}\n\n// Save user preference\nfunction setTheme(theme) {\n  document.body.className = theme;\n  localStorage.setItem(\"theme\", theme);\n}\n</code></pre>"},{"location":"frontend/js/storage.html#6-sessionstorage-vs-localstorage","title":"6. <code>sessionStorage</code> vs. <code>localStorage</code>","text":"Feature <code>localStorage</code> <code>sessionStorage</code> Lifespan Until manually cleared Until tab is closed Shared Across Tabs \u2705 Yes \u274c No Size Limit ~5-10MB ~5MB"},{"location":"frontend/js/storage.html#7-listen-to-storage-changes","title":"7. Listen to Storage Changes","text":"<p>Useful when syncing changes across tabs:</p> <pre><code>window.addEventListener(\"storage\", (event) =&gt; {\n  console.log(`Key changed: ${event.key}`);\n  console.log(`New value: ${event.newValue}`);\n});\n</code></pre>"},{"location":"frontend/js/storage.html#video-guide","title":"Video Guide","text":"localStorage in JavaScript - Web Dev Simplified"},{"location":"frontend/js/storage.html#summary","title":"Summary","text":"<ul> <li><code>localStorage</code> lets you persist small data client-side.</li> <li>Keys and values are always strings.</li> <li>Serialize objects using <code>JSON.stringify()</code>.</li> <li>Be careful not to store sensitive data.</li> </ul>"},{"location":"frontend/js/dom/dom.html","title":"JavaScript DOM \ud83c\udf10","text":""},{"location":"frontend/js/dom/dom.html#1-what-is-the-dom","title":"1- What is the DOM?","text":"<p>The Document Object Model (DOM) is a tree-like structure that represents the HTML elements of a web page. JavaScript uses the DOM to read and change content, structure, and style.</p>"},{"location":"frontend/js/dom/dom.html#2-accessing-elements","title":"2- Accessing Elements","text":"<pre><code>document.getElementById(\"id\");\ndocument.getElementsByClassName(\"class\");\ndocument.getElementsByTagName(\"tag\");\ndocument.querySelector(\"selector\");\ndocument.querySelectorAll(\"selector\");\n</code></pre>"},{"location":"frontend/js/dom/dom.html#3-changing-content","title":"3- Changing Content","text":"<pre><code>document.getElementById(\"demo\").textContent = \"Hello!\";\ndocument.getElementById(\"demo\").innerHTML = \"&lt;b&gt;Hello!&lt;/b&gt;\";\n</code></pre>"},{"location":"frontend/js/dom/dom.html#4-changing-styles","title":"4- Changing Styles","text":"<pre><code>document.getElementById(\"demo\").style.color = \"red\";\n</code></pre>"},{"location":"frontend/js/dom/dom.html#5-creating-and-adding-elements","title":"5- Creating and Adding Elements","text":"<pre><code>const p = document.createElement(\"p\");\np.textContent = \"New paragraph\";\ndocument.body.appendChild(p);\n</code></pre>"},{"location":"frontend/js/dom/dom.html#6-removing-elements","title":"6- Removing Elements","text":"<pre><code>const elem = document.getElementById(\"demo\");\nelem.remove();\n</code></pre>"},{"location":"frontend/js/dom/dom.html#7-dom-events","title":"7- DOM Events","text":"<pre><code>document.getElementById(\"btn\").addEventListener(\"click\", function () {\n  alert(\"Clicked!\");\n});\n</code></pre>"},{"location":"frontend/js/dom/eventHandler.html","title":"JavaScript Events","text":""},{"location":"frontend/js/dom/eventHandler.html#1-what-is-an-event","title":"1- What is an Event?","text":"<p>An event is something that happens in the browser (click, scroll, key press, etc.).</p>"},{"location":"frontend/js/dom/eventHandler.html#2-common-event-types","title":"2- Common Event Types","text":"<ul> <li><code>click</code></li> <li><code>mouseover</code></li> <li><code>keydown</code></li> <li><code>submit</code></li> <li><code>load</code></li> </ul>"},{"location":"frontend/js/dom/eventHandler.html#3-adding-event-listeners","title":"3- Adding Event Listeners","text":"<pre><code>document.getElementById(\"btn\").addEventListener(\"click\", function () {\n  alert(\"Button clicked!\");\n});\n</code></pre>"},{"location":"frontend/js/dom/eventHandler.html#4-removing-event-listeners","title":"4- Removing Event Listeners","text":"<pre><code>function sayHi() {\n  alert(\"Hi\");\n}\nconst btn = document.getElementById(\"btn\");\nbtn.addEventListener(\"click\", sayHi);\nbtn.removeEventListener(\"click\", sayHi);\n</code></pre>"},{"location":"frontend/js/dom/eventHandler.html#5-event-object","title":"5- Event Object","text":"<pre><code>document.addEventListener(\"click\", function (event) {\n  console.log(event.target); // What was clicked\n});\n</code></pre>"},{"location":"frontend/js/dom/eventHandler.html#6-event-bubbling-and-capturing","title":"6- Event Bubbling and Capturing","text":"<ul> <li>Bubbling: Events go from the innermost element up.</li> <li>Capturing: Events go from the outermost element down.</li> </ul>"},{"location":"frontend/js/fetch/fetch.html","title":"Fetch API and Async/Await","text":""},{"location":"frontend/js/fetch/fetch.html#1-what-is-fetch","title":"1- What is Fetch?","text":"<p>The Fetch API lets you make network requests (like getting data from a server).</p> <pre><code>fetch(\"https://api.example.com/data\")\n  .then((response) =&gt; response.json())\n  .then((data) =&gt; console.log(data))\n  .catch((error) =&gt; console.error(error));\n</code></pre>"},{"location":"frontend/js/fetch/fetch.html#2-using-asyncawait","title":"2- Using async/await","text":"<pre><code>async function getData() {\n  try {\n    const response = await fetch(\"https://api.example.com/data\");\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>"},{"location":"frontend/js/fetch/fetch.html#3-why-asyncawait","title":"3- Why async/await?","text":"<ul> <li>Makes code easier to read</li> <li>Acts like synchronous code but works asynchronously</li> </ul>"},{"location":"frontend/js/fetch/fetch.html#4-async-vs-sync","title":"4- Async vs Sync","text":"<p>Synchronous: Code runs line by line, waits for each step. Asynchronous: Code can move on without waiting (non-blocking).</p> <p>Example:</p> <pre><code>console.log(\"Start\");\n\nsetTimeout(() =&gt; {\n  console.log(\"This runs later\");\n}, 1000);\n\nconsole.log(\"End\");\n</code></pre> <p>1- console.log(\"Start\");</p> <ul> <li>This line is synchronous, so it runs immediately and prints: Start</li> </ul> <p>2- setTimeout(() =&gt; { console.log(\"This runs later\"); }, 1000);</p> <ul> <li>This is asynchronous. It tells the browser:</li> </ul> <p>\"Wait 1 second, then run this function.\" But it doesn\u2019t stop the rest of the code from running.It continues right away. So instead of waiting 1 second here, the browser sets a &gt;timer and moves on.</p> <p>3- console.log(\"End\");</p> <ul> <li>This line runs immediately after setting the timer, so it prints: End</li> </ul> <ul> <li>so final output</li> </ul> <pre><code>Start\nEnd\nThis runs later\n</code></pre>"},{"location":"frontend/js/fetch/fetch.html#video-guide","title":"Video Guide","text":"localStorage in JavaScript - Web Dev Simplified"},{"location":"frontend/js/fetch/important1.html","title":"Error Handling in JavaScript with try - catch","text":"<p>Handling errors properly is a key part of writing reliable, maintainable JavaScript\u2014especially when working with asynchronous code like network requests.</p> <p>This guide covers how to use <code>try</code>, <code>catch</code>, <code>finally</code>, and custom error handling with real-world examples.</p>"},{"location":"frontend/js/fetch/important1.html#1-the-try-catch-pattern","title":"1. The <code>try</code> / <code>catch</code> Pattern","text":"<p>The <code>try</code> block runs code that might throw an error. If an error occurs, control jumps to the <code>catch</code> block.</p> <pre><code>try {\n  // risky operation\n} catch (error) {\n  // handle the error\n}\n</code></pre>"},{"location":"frontend/js/fetch/important1.html#example","title":"Example:","text":"<pre><code>try {\n  const data = JSON.parse(\"invalid JSON\");\n} catch (err) {\n  console.error(\"Parsing error:\", err.message);\n}\n</code></pre>"},{"location":"frontend/js/fetch/important1.html#2-handling-asynchronous-errors","title":"2. Handling Asynchronous Errors","text":"<p>When working with <code>async/await</code>, you should wrap your <code>await</code> calls inside <code>try/catch</code> blocks to handle rejections and runtime errors gracefully.</p>"},{"location":"frontend/js/fetch/important1.html#example-with-fetch","title":"Example with <code>fetch()</code>:","text":"<pre><code>async function fetchData(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Network or parsing error:\", error.message);\n    // Optionally rethrow or handle further\n  }\n}\n</code></pre>"},{"location":"frontend/js/fetch/important1.html#3-checking-http-status-with-fetch","title":"3. Checking HTTP Status with <code>fetch()</code>","text":"<p><code>fetch()</code> does not throw for HTTP errors like 404 or 500\u2014it only throws for network issues. You must check the <code>.ok</code> property on the response manually.</p>"},{"location":"frontend/js/fetch/important1.html#full-example","title":"Full Example:","text":"<pre><code>async function getUser() {\n  try {\n    const response = await fetch(\"https://api.example.com/user\");\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    console.error(\"Fetch failed:\", error.message);\n  }\n}\n</code></pre>"},{"location":"frontend/js/fetch/important1.html#4-custom-error-messages","title":"4. Custom Error Messages","text":"<p>You can throw your own error messages based on specific logic, such as HTTP status codes:</p> <pre><code>if (response.status === 404) {\n  throw new Error(\"User not found\");\n}\n</code></pre> <p>This allows you to provide meaningful feedback for different error cases.</p>"},{"location":"frontend/js/fetch/important1.html#5-using-finally","title":"5. Using <code>finally</code>","text":"<p>The <code>finally</code> block always runs\u2014whether an error occurred or not. It's perfect for cleanup actions like hiding loaders or resetting states.</p> <pre><code>async function loadWithSpinner() {\n  showSpinner();\n  try {\n    const response = await fetch(\"/data.json\");\n    const result = await response.json();\n    return result;\n  } catch (err) {\n    console.error(\"Something went wrong:\", err.message);\n  } finally {\n    hideSpinner();\n  }\n}\n</code></pre>"},{"location":"frontend/js/fetch/important1.html#video-tutorial-trycatch-explained","title":"Video Tutorial: Try/Catch Explained","text":"<p>Here\u2019s a clear and concise video that walks through error handling in JavaScript using <code>try</code>, <code>catch</code>, and <code>finally</code>:</p> JavaScript Try / Catch / Finally"},{"location":"frontend/js/fetch/important1.html#summary","title":"Summary","text":"<ul> <li>Use <code>try/catch</code> to isolate risky code and gracefully handle errors.</li> </ul>"},{"location":"frontend/ts/index.html","title":"TypeScript: A Better JavaScript \u2728","text":"<p>TypeScript is a strongly typed superset of JavaScript that compiles to plain JavaScript. It offers features like static type checking, interfaces, and tooling that improve code safety and developer productivity.</p>"},{"location":"frontend/ts/index.html#why-typescript","title":"\ud83d\ude80 Why TypeScript?","text":"<ul> <li>Catch errors at compile-time instead of runtime</li> <li>Better editor support (autocomplete, refactoring, etc.)</li> <li>Improved code readability and documentation</li> <li>Scale large projects more easily with type safety</li> </ul>"},{"location":"frontend/ts/index.html#typescript-vs-javascript","title":"\ud83d\udd0d TypeScript vs JavaScript","text":"Feature JavaScript \u2705 TypeScript \u2705\u2705 Dynamically typed \u2714\ufe0f \u274c Statically typed \u274c \u2714\ufe0f Interfaces \u274c (via JSDoc) \u2714\ufe0f Tooling (autocomplete, intellisense) Limited Excellent Learning Curve Low Moderate <p>TypeScript is just JavaScript \u2014 with types.</p>"},{"location":"frontend/ts/index.html#installing-typescript","title":"\ud83d\udee0\ufe0f Installing TypeScript","text":"<p>You can install it globally via npm:</p> <pre><code>npm install -g typescript\n</code></pre> <p>Check version:</p> <pre><code>tsc --version\n</code></pre> <p>To initialize a project:</p> <pre><code>tsc --init\n</code></pre> <p>This creates a <code>tsconfig.json</code> file.</p>"},{"location":"frontend/ts/index.html#a-simple-project-structure","title":"\ud83d\udcc1 A Simple Project Structure","text":"<pre><code>my-app/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Use <code>tsc</code> to compile:</p> <pre><code>tsc\n</code></pre> <p>Or watch for changes:</p> <pre><code>tsc --watch\n</code></pre>"},{"location":"frontend/ts/index.html#compiling-ts-to-js","title":"\ud83d\udd04 Compiling TS to JS","text":"<p>Your <code>.ts</code> file compiles to <code>.js</code> with the same logic \u2014 just with the types stripped out.</p> <pre><code>// index.ts\nlet name: string = \"TypeScript\";\nconsole.log(\"Hello\", name);\n</code></pre> <p>Becomes:</p> <pre><code>// index.js\nlet name = \"TypeScript\";\nconsole.log(\"Hello\", name);\n</code></pre>"},{"location":"frontend/ts/index.html#video-what-is-typescript","title":"\ud83d\udcfa Video: What is TypeScript?","text":"TypeScript"},{"location":"frontend/ts/functions.html","title":"TypeScript Functions","text":"<p>TypeScript provides rich typing for functions, enabling you to catch argument or return-type issues at compile time.</p>"},{"location":"frontend/ts/functions.html#1-function-parameter-and-return-types","title":"1. Function Parameter and Return Types","text":"<p>You can explicitly type both the parameters and the return value:</p> <pre><code>function greet(name: string): string {\n  return `Hello, ${name}`;\n}\n</code></pre> <p>If the return type is not provided, TypeScript will infer it \u2014 but explicit return types are recommended for clarity and error prevention.</p>"},{"location":"frontend/ts/functions.html#2-optional-and-default-parameters","title":"2. Optional and Default Parameters","text":""},{"location":"frontend/ts/functions.html#optional-parameters","title":"Optional Parameters:","text":"<pre><code>function log(message: string, user?: string): void {\n  console.log(user ? `${user}: ${message}` : message);\n}\n</code></pre>"},{"location":"frontend/ts/functions.html#default-parameters","title":"Default Parameters:","text":"<pre><code>function log(message: string, level: string = \"info\"): void {\n  console.log(`[${level}] ${message}`);\n}\n</code></pre>"},{"location":"frontend/ts/functions.html#3-anonymous-functions-and-arrow-functions","title":"3. Anonymous Functions and Arrow Functions","text":"<p>Type annotations for anonymous functions are usually inferred:</p> <pre><code>const double = (value: number): number =&gt; value * 2;\n</code></pre> <p>You can also explicitly declare types:</p> <pre><code>const double: (x: number) =&gt; number = (x) =&gt; x * 2;\n</code></pre>"},{"location":"frontend/ts/functions.html#4-function-types-as-variables","title":"4. Function Types (as Variables)","text":"<p>Function types can be defined and reused:</p> <pre><code>type MathOp = (a: number, b: number) =&gt; number;\n\nconst add: MathOp = (x, y) =&gt; x + y;\n</code></pre>"},{"location":"frontend/ts/functions.html#5-rest-parameters","title":"5. Rest Parameters","text":"<pre><code>function sum(...values: number[]): number {\n  return values.reduce((acc, val) =&gt; acc + val, 0);\n}\n</code></pre>"},{"location":"frontend/ts/functions.html#6-function-overloads","title":"6. Function Overloads","text":"<p>Important: TypeScript allows function overloads, but the implementation must handle all cases.</p> <pre><code>function reverse(input: string): string;\nfunction reverse(input: number[]): number[];\nfunction reverse(input: string | number[]): string | number[] {\n  return typeof input === \"string\"\n    ? input.split(\"\").reverse().join(\"\")\n    : input.slice().reverse();\n}\n</code></pre>"},{"location":"frontend/ts/functions.html#7-void-vs-never","title":"7. <code>void</code> vs <code>never</code>","text":"<ul> <li><code>void</code>: function returns nothing.</li> <li><code>never</code>: function never returns (e.g., throws an error or has an infinite loop).</li> </ul> <pre><code>function fail(): never {\n  throw new Error(\"Something went wrong\");\n}\n</code></pre>"},{"location":"frontend/ts/generics.html","title":"TypeScript Generics","text":"<p>Generics enable you to write flexible and reusable code without losing type safety.</p>"},{"location":"frontend/ts/generics.html#1-what-are-generics","title":"1. What Are Generics?","text":"<p>Generics allow you to define a placeholder for a type that is provided when the function, class, or interface is used.</p>"},{"location":"frontend/ts/generics.html#basic-example","title":"Basic Example:","text":"<pre><code>function identity&lt;T&gt;(value: T): T {\n  return value;\n}\n\nconst result = identity&lt;string&gt;(\"hello\");\n</code></pre> <ul> <li><code>T</code> is a generic type parameter.</li> <li>You can explicitly provide the type (<code>&lt;string&gt;</code>) or let TypeScript infer it.</li> </ul>"},{"location":"frontend/ts/generics.html#2-type-inference-with-generics","title":"2. Type Inference with Generics","text":"<p>You often don\u2019t need to specify the type; TypeScript infers it:</p> <pre><code>const numberResult = identity(123); // inferred as number\n</code></pre>"},{"location":"frontend/ts/generics.html#3-generic-interfaces","title":"3. Generic Interfaces","text":"<pre><code>interface ApiResponse&lt;T&gt; {\n  data: T;\n  success: boolean;\n}\n\nconst response: ApiResponse&lt;string&gt; = {\n  data: \"OK\",\n  success: true,\n};\n</code></pre>"},{"location":"frontend/ts/generics.html#4-generic-functions-with-constraints","title":"4. Generic Functions with Constraints","text":"<p>Use <code>extends</code> to constrain generics to specific structures:</p> <pre><code>function getLength&lt;T extends { length: number }&gt;(item: T): number {\n  return item.length;\n}\n\ngetLength(\"hello\"); // \u2705\ngetLength([1, 2, 3]); // \u2705\ngetLength(123); // \u274c\n</code></pre>"},{"location":"frontend/ts/generics.html#5-generics-in-classes","title":"5. Generics in Classes","text":"<pre><code>class Box&lt;T&gt; {\n  contents: T;\n\n  constructor(value: T) {\n    this.contents = value;\n  }\n\n  getContents(): T {\n    return this.contents;\n  }\n}\n\nconst stringBox = new Box&lt;string&gt;(\"Hello\");\n</code></pre>"},{"location":"frontend/ts/generics.html#6-multiple-generic-types","title":"6. Multiple Generic Types","text":"<pre><code>function merge&lt;T, U&gt;(a: T, b: U): T &amp; U {\n  return { ...a, ...b };\n}\n\nconst merged = merge({ name: \"Alice\" }, { age: 30 });\n// merged is of type { name: string; age: number }\n</code></pre>"},{"location":"frontend/ts/generics.html#7-important-notes","title":"7. Important Notes","text":"<p>Important: Generics are erased during compilation \u2014 they exist only at compile time to enforce type checks. JavaScript output does not retain any generic types.</p>"},{"location":"frontend/ts/generics.html#video-typescript-generics-tutorial","title":"Video: TypeScript Generics Tutorial","text":"Mastering TypeScript Generics \u2013 Web Dev Simplified"},{"location":"frontend/ts/important1.html","title":"Real-World Use Cases for Type Narrowing","text":"<p>Type narrowing helps TypeScript developers write safer, more accurate code in real apps. Below are real scenarios where narrowing improves reliability and clarity.</p>"},{"location":"frontend/ts/important1.html#1-handling-api-response-types","title":"1. Handling API Response Types","text":"<pre><code>type ApiResponse =\n  | { success: true; data: string[] }\n  | { success: false; error: string };\n\nfunction handleResponse(res: ApiResponse) {\n  if (res.success) {\n    console.log(\"Items:\", res.data.join(\", \"));\n  } else {\n    console.error(\"API Error:\", res.error);\n  }\n}\n</code></pre> <p>Important: Discriminated unions allow you to handle different outcomes with full type safety.</p>"},{"location":"frontend/ts/important1.html#2-working-with-form-values","title":"2. Working with Form Values","text":"<pre><code>function parseFormValue(value: string | number | boolean) {\n  if (typeof value === \"string\") {\n    return value.trim();\n  }\n  if (typeof value === \"number\") {\n    return value.toFixed(2);\n  }\n  return value ? \"Yes\" : \"No\";\n}\n</code></pre> <p>Use case: Form fields often have mixed types \u2014 narrowing ensures correct behavior.</p>"},{"location":"frontend/ts/important1.html#3-component-props-in-ui-libraries","title":"3. Component Props in UI Libraries","text":"<pre><code>type ButtonProps =\n  | { variant: \"link\"; href: string }\n  | { variant: \"action\"; onClick: () =&gt; void };\n\nfunction Button(props: ButtonProps) {\n  if (props.variant === \"link\") {\n    return &lt;a href={props.href}&gt;Link&lt;/a&gt;;\n  } else {\n    return &lt;button onClick={props.onClick}&gt;Click&lt;/button&gt;;\n  }\n}\n</code></pre> <p>Use case: Prevents invalid prop combinations (e.g., passing <code>href</code> to an action button).</p>"},{"location":"frontend/ts/important1.html#4-event-handling-in-dom","title":"4. Event Handling in DOM","text":"<pre><code>function handleInput(event: Event) {\n  if (event.target instanceof HTMLInputElement) {\n    console.log(\"Input value:\", event.target.value);\n  }\n}\n</code></pre> <p>Important: The DOM API uses many union types \u2014 <code>instanceof</code> helps ensure safe usage.</p>"},{"location":"frontend/ts/important1.html#5-parsing-json-from-external-sources","title":"5. Parsing JSON from External Sources","text":"<pre><code>function processUser(user: unknown) {\n  if (\n    typeof user === \"object\" &amp;&amp;\n    user !== null &amp;&amp;\n    \"name\" in user &amp;&amp;\n    typeof (user as any).name === \"string\"\n  ) {\n    console.log(\"User:\", (user as any).name);\n  } else {\n    console.warn(\"Invalid user object\");\n  }\n}\n</code></pre> <p>Use case: APIs can return malformed or unexpected data \u2014 narrowing adds protection.</p>"},{"location":"frontend/ts/important1.html#6-differentiating-between-error-shapes","title":"6. Differentiating Between Error Shapes","text":"<pre><code>function handleError(error: unknown) {\n  if (error instanceof Error) {\n    console.error(\"Standard error:\", error.message);\n  } else if (\n    typeof error === \"object\" &amp;&amp;\n    error !== null &amp;&amp;\n    \"message\" in error\n  ) {\n    console.error(\"Custom error:\", (error as any).message);\n  } else {\n    console.error(\"Unknown error:\", error);\n  }\n}\n</code></pre> <p>Use case: Helps handle both <code>Error</code> objects and custom error shapes from APIs.</p>"},{"location":"frontend/ts/important1.html#summary","title":"Summary","text":"<ul> <li>Type narrowing makes code safer and smarter, especially in conditions, components, and APIs.</li> <li>Use <code>typeof</code>, <code>in</code>, <code>instanceof</code>, and discriminated unions to control behavior by type.</li> <li>Combine narrowing with type guards and runtime checks for robust code.</li> </ul>"},{"location":"frontend/ts/interfaces.html","title":"TypeScript Interfaces and Type Aliases","text":"<p>Interfaces and type aliases are powerful tools for creating reusable, readable, and type-safe structures in TypeScript.</p>"},{"location":"frontend/ts/interfaces.html#1-defining-an-interface","title":"1. Defining an Interface","text":"<p>Interfaces describe the shape of an object.</p> <pre><code>interface User {\n  name: string;\n  age: number;\n  isAdmin?: boolean; // optional\n}\n\nconst user: User = {\n  name: \"Alice\",\n  age: 30,\n};\n</code></pre>"},{"location":"frontend/ts/interfaces.html#2-type-alias","title":"2. Type Alias","text":"<p>Type aliases work similarly to interfaces but are more flexible.</p> <pre><code>type Product = {\n  id: number;\n  title: string;\n  price: number;\n};\n\nconst item: Product = {\n  id: 1,\n  title: \"Keyboard\",\n  price: 49.99,\n};\n</code></pre> <p>Important: Use <code>type</code> for unions, primitives, tuples, and more complex types. Use <code>interface</code> when extending or creating object shapes.</p>"},{"location":"frontend/ts/interfaces.html#3-extending-interfaces","title":"3. Extending Interfaces","text":"<p>Interfaces can be extended to inherit properties:</p> <pre><code>interface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\nconst rex: Dog = {\n  name: \"Rex\",\n  breed: \"Labrador\",\n};\n</code></pre>"},{"location":"frontend/ts/interfaces.html#4-extending-type-aliases-via-intersection","title":"4. Extending Type Aliases (via intersection)","text":"<p>You can combine type aliases using <code>&amp;</code>:</p> <pre><code>type Timestamps = {\n  createdAt: Date;\n  updatedAt: Date;\n};\n\ntype Post = {\n  title: string;\n  content: string;\n} &amp; Timestamps;\n\nconst blogPost: Post = {\n  title: \"Hello\",\n  content: \"World\",\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n</code></pre>"},{"location":"frontend/ts/interfaces.html#5-key-differences","title":"5. Key Differences","text":"Feature Interface Type Alias Extensible \u2705 Yes \u2705 With <code>&amp;</code> Use for primitives \u274c No \u2705 Yes Declaration merging \u2705 Yes \u274c No Use in unions/tuples \u274c No \u2705 Yes"},{"location":"frontend/ts/interfaces.html#6-when-to-use-each","title":"6. When to Use Each","text":"<ul> <li>Use <code>interface</code> when modeling the shape of objects or working with class-based code.</li> <li>Use <code>type</code> when combining types, working with primitives, or doing advanced type operations.</li> </ul> <p>Important: Interfaces are generally preferred for public APIs, as they support declaration merging.</p>"},{"location":"frontend/ts/types.html","title":"TypeScript Type System","text":"<p>TypeScript\u2019s static typing system helps catch errors early and improves code clarity and maintainability.</p>"},{"location":"frontend/ts/types.html#1-basic-type-annotations","title":"1. Basic Type Annotations","text":"<p>You can declare variable types explicitly:</p> <pre><code>let age: number = 30;\nlet name: string = \"Alice\";\nlet isActive: boolean = true;\n</code></pre>"},{"location":"frontend/ts/types.html#arrays","title":"Arrays","text":"<pre><code>let numbers: number[] = [1, 2, 3];\nlet tags: string[] = [\"ts\", \"js\"];\n</code></pre>"},{"location":"frontend/ts/types.html#objects","title":"Objects","text":"<pre><code>let user: { name: string; age: number } = {\n  name: \"John\",\n  age: 25,\n};\n</code></pre>"},{"location":"frontend/ts/types.html#2-type-inference","title":"2. Type Inference","text":"<p>TypeScript can infer types when you initialize variables:</p> <pre><code>let count = 10; // inferred as number\n</code></pre> <p>Important: Always annotate function parameters and return types, especially for complex logic.</p> <pre><code>function greet(name: string): string {\n  return `Hello, ${name}`;\n}\n</code></pre>"},{"location":"frontend/ts/types.html#3-union-and-literal-types","title":"3. Union and Literal Types","text":"<p>Union types allow multiple possible values:</p> <pre><code>let id: number | string;\nid = 123;\nid = \"abc\";\n</code></pre> <p>Literal types allow only specific string or number values:</p> <pre><code>let status: \"success\" | \"error\" | \"loading\";\nstatus = \"success\"; // OK\nstatus = \"failed\"; // Error\n</code></pre>"},{"location":"frontend/ts/types.html#4-tuples","title":"4. Tuples","text":"<p>Tuples are arrays with fixed length and types:</p> <pre><code>let userInfo: [string, number] = [\"Alice\", 30];\n</code></pre>"},{"location":"frontend/ts/types.html#5-optional-and-default-parameters","title":"5. Optional and Default Parameters","text":"<p>You can make parameters optional or assign default values:</p> <pre><code>function log(message: string, level: string = \"info\") {\n  console.log(`[${level}] ${message}`);\n}\n</code></pre> <pre><code>function printUser(name: string, age?: number) {\n  console.log(name, age);\n}\n</code></pre>"},{"location":"frontend/ts/types.html#6-common-pitfalls","title":"6. Common Pitfalls","text":"<ul> <li>TypeScript performs type checking at compile time, not runtime.</li> <li>Using <code>any</code> disables type safety. Avoid it unless absolutely necessary.</li> </ul> <pre><code>let value: any = \"hello\"; // avoid if possible\n</code></pre> <p>Use <code>unknown</code> when the type is uncertain:</p> <pre><code>let input: unknown;\n</code></pre> <p>Important: Prefer <code>unknown</code> over <code>any</code> because <code>unknown</code> forces type checking before usage.</p>"},{"location":"operating-system/index.html","title":"Operating System Fundamentals","text":""},{"location":"operating-system/index.html#overview-of-os","title":"Overview of OS","text":""},{"location":"operating-system/index.html#1-what-is-an-operating-system","title":"1. What is an Operating System?","text":"<pre><code>[ hardware ]       \u2192 (CPU, memory, devices)\n     \u2b07\n[ **OS** ]         \u2192 (kernel, libraries, drivers)\n     \u2b07\n[ applications]    \u2192 (word, web browser, etc.)\n     \u2b07\n[ Users ]          \u2192 (Persons, Computers, machines)\n</code></pre> <code>OS :</code> acts as a mediator between hardware and applications. <code>Abstraction :</code> to hide details of hardware from applications (e.g., file system, networking,virtual Memory, etc.)"},{"location":"operating-system/index.html#11-os-goals","title":"1.1 OS goals:","text":"<ul> <li>Simpler: Hides hardware complexity, making it easier for programmers.</li> <li>Device Independent: Makes different devices of the same type look the same to apps.</li> <li>Portable: Provides a consistent interface so apps can run on many machines/versions.</li> </ul>"},{"location":"operating-system/index.html#12-how-the-os-manages-applications","title":"1.2 How the OS Manages Applications","text":"<ul> <li> Virtual Machine Interface: <ul> <li>Makes each program think it\u2019s the only one running.</li> </ul> </li> <li> Protection: <ul> <li>Stops one program from interfering with another.</li> </ul> </li> <li> Sharing: <ul> <li>Lets multiple programs run at the same time and share resources.</li> </ul> </li> </ul>"},{"location":"operating-system/index.html#13-what-is-part-of-an-operating-system","title":"1.3 What is part of an Operating System?","text":"<p>Windowing system (GUI) ?</p> <ul> <li>Shows windows, icons, mouse, etc.</li> <li>Sometimes part of OS (older Windows).</li> <li>Sometimes separate (Linux lets you choose).</li> </ul> <p>Web browser ?</p> <ul> <li>Not part of OS.</li> <li>It\u2019s an application running on the OS.</li> </ul>"},{"location":"operating-system/index.html#14-popular-operating-systems-today","title":"1.4 Popular Operating Systems Today","text":"OS Description Windows 10 Common on desktops and laptops. Linux Free, open-source; used on servers, supercomputers, and Android. FreeBSD Open-source; used for servers and embedded systems. Android Most popular mobile OS; based on the Linux kernel. macOS Apple\u2019s OS for Mac computers. iOS Apple\u2019s OS for iPhones and iPads."},{"location":"operating-system/index.html#15-what-operating-systems-do","title":"1.5 What Operating Systems Do","text":"<ul> <li>For Users: The OS focuses on convenience and ease of use.</li> <li>For Servers: The OS manages resources to keep many users happy.</li> <li>For Mobile Devices: The OS must save power and be easy to use.</li> <li>For Embedded Computers: The OS runs automatically without user input.</li> </ul>"},{"location":"operating-system/index.html#2-operating-system-definition","title":"2. Operating System Definition","text":""},{"location":"operating-system/index.html#21-what-is-the-kernelother-programsmiddleware","title":"2.1 What is the Kernel,Other Programs,Middleware ?","text":"<code>kernel :</code> <ul> <li>is the main part of the OS.</li> </ul> <ul> <li>It always runs and has the <code>highest privileges</code>.</li> </ul> <ul> <li>It connects software to hardware and manages CPU, memory, etc.</li> </ul> <code>other programs :</code> <ul> <li>System programs \u2013 come with OS, help manage things like the GUI, not part of the kernel.</li> </ul> <ul> <li>Application programs \u2013 like web browsers or games. They have low privileges and ask the kernel to do tasks (e.g., save files, access network).</li> </ul> <code>middleware :</code> <ul> <li>Extra software that helps developers, like tools for databases or multimedia.</li> </ul>"},{"location":"operating-system/index.html#3-os-basics","title":"3. OS Basics","text":""},{"location":"operating-system/index.html#31-primitive-os-vs-multitasking","title":"3.1 Primitive OS vs Multitasking","text":"Topic Description Problems Primitive OS Just a library of services; can run one program at a time; assumes no bad users/programs. - Poor hardware use: CPU idle while disk works.- Wastes time: Must wait for one program to finish. Multitasking Lets multiple programs run at once by quickly switching between them (context switch). - Infinite loops: Program never releases CPU.- Memory issues: Program may access/change another\u2019s memory."},{"location":"operating-system/index.html#32-how-does-the-os-protect-itself-and-other-programs","title":"3.2 How Does the OS Protect Itself and Other Programs?","text":"<pre><code>User Programs (P1)   \u2192\nUser Programs (P2)   \u2192   User Space (limited access, safe zone)\nUser Programs (P3)   \u2192\nUser Programs (P4)   \u2192\n\n   \u2b07 (controlled access)\n   \u2b07\n\nKernel (OS Core)  \u2192  Kernel Space (full privileges, direct HW access)\n\n   \u2b07\n   \u2b07\nHardware (CPU, Memory, Devices)\n</code></pre> <ul> <li>The OS uses privileged roles to separate tasks:</li> </ul> <ul> <li>Kernel space \u2013 for the OS core, highest privileges, full access to hardware.</li> </ul> <ul> <li>User space \u2013 for user programs, limited privileges to protect the system.</li> </ul> <ul> <li>This separation stops a faulty or malicious program from:</li> </ul> <ul> <li>Crashing the whole system</li> </ul> <ul> <li>Affecting other programs</li> </ul>"},{"location":"operating-system/index.html#321-kernel-space-vs-user-space-table","title":"3.2.1 Kernel Space vs User Space Table","text":"Concept Description Purpose / Benefit Kernel Space Core of the OS, highest privileges, direct hardware access. - Runs critical tasks- Full control over system User Space Where user applications (P1\u2013P4) run with limited privileges. - Prevents crashes spreading- Protects OS and programs Separation Clear boundary enforced between kernel and user programs. - Stops faulty/malicious apps from harming system Example Programs P1\u2013P4 run safely in user space, kernel stays isolated underneath. - Stability &amp; security maintained"},{"location":"operating-system/index.html#33-what-is-a-system-call","title":"3.3 What is a System Call?","text":"<ul> <li>A system call is how a program in user space asks the OS kernel to do something, like access a file or device.</li> <li>Think of it as a special request\u2014programs can't directly access hardware.</li> <li>Unlike normal function calls, system calls transfer control to the kernel, which has high privileges.</li> <li>The kernel handles the request and then returns control to the program.</li> <li> Many common actions (e.g., printing text) use system calls behind the scenes. <ul> <li>Example: <code>printf()</code> uses a system call like <code>write()</code>.</li> </ul> </li> </ul>"},{"location":"operating-system/index.html#331-how-does-it-work","title":"3.3.1 How Does It Work?","text":"<ul> <li>The program prepares arguments and uses a special instruction to trap into the kernel.</li> </ul> <ul> <li>This trap switches from user mode to kernel mode, allowing the OS to complete the request.</li> </ul> <pre><code>[User Program]\n     |\n     |  (1) Calls function like printf()\n     v\n[System Call Interface]\n     |\n     |  (2) Trap instruction \u2192 switch to kernel mode\n     v\n[OS Kernel]\n     |\n     |  (3) Kernel exec request (e.g., write to file/device)\n     v\n[Hardware / Device]\n     |\n     |  (4) Kernel finishes, switches  to user mode\n     v\n[User Program continues]\n</code></pre>"},{"location":"operating-system/index.html#4-overview-of-computer-system-structure","title":"4. Overview of Computer System Structure","text":""},{"location":"operating-system/index.html#41-how-are-the-parts-of-a-computer-organized","title":"4.1 How Are the Parts of a Computer Organized?","text":"<pre><code>                 +----------------------------+\n                 |          CPU(s)            |\n                 | - Executes instructions    |\n                 | - Processes data           |\n                 +----------------------------+\n                          |\n                          v\n                 +----------------------------+\n                 |          Cache             |\n                 | - Small, fast memory       |\n                 | - Reduces CPU wait time    |\n                 +----------------------------+\n                          |\n                          v\n                 +----------------------------+\n                 |       Main Memory          |\n                 | - Stores programs &amp; data   |\n                 | - Shared by CPU &amp; devices  |\n                 +----------------------------+\n                          ^\n                          |\n   -------------------------------------------------------------\n   |                         System Bus                        |\n   | - Connects CPU, memory, and device controllers           |\n   -------------------------------------------------------------\n        |                       |                     |\n        v                       v                     v\n+-------------------+   +-------------------+   +-------------------+\n|  Disk Controller  |   | Keyboard Controller|   | Printer Controller|\n| - Manages the disk|   | - Handles keyboard |   | - Handles printer |\n| - Has local buffer|   | - Has local buffer |   | - Has local buffer|\n+-------------------+   +-------------------+   +-------------------+\n        |                       |                     |\n        v                       v                     v\n   +-----------+           +-----------+         +-----------+\n   | Disk/SSD  |           | Keyboard  |         | Printer   |\n   +-----------+           +-----------+         +-----------+\n        ^\n        |\n   +----------------+\n   | DMA Controller |\n   | - Moves data   |\n   |   without CPU  |\n   +----------------+\n\n*Interrupts:* Devices can send signals to CPU via the bus\n              to notify events (like I/O completion)\n\n*Timer/Clock:* Generates periodic interrupts for scheduling\n               and time management\n</code></pre> <ul> <li> A computer has: <ul> <li>One or more CPUs</li> </ul> <ul> <li>Main memory</li> </ul> <ul> <li>Device controllers (for disk, keyboard, printer, etc.)</li> </ul> </li> <li> <p>All parts connect through the <code>system bus</code> (shared communication line).</p> </li> <li> <p><code>Device controllers</code> are like managers for specific devices, such as a disk, keyboard, or printer. Each one has its own local buffer to hold data.</p> </li> <li> <p>The <code>CPU</code> and <code>I/O devices</code> can work at the same time, competing for main memory.</p> </li> </ul>"},{"location":"operating-system/index.html#42-what-is-an-interrupt","title":"4.2 What is an Interrupt?","text":"<code>Interrupt :</code> <ul> <li>is a signal sent to the CPU by a device controller.</li> </ul> <ul> <li>It tells the CPU that an I/O operation (like a disk read) is finished.</li> </ul> <ul> <li>During I/O, the CPU and the device controller work in parallel.</li> </ul> <p>The device controller handles the I/O, moving data to/from its local buffer.</p> <p>Once the I/O operation is done, the controller sends an interrupt signal to the CPU. which says stop ,Then CPU can stop what it was doing to handle the request.</p>"},{"location":"operating-system/index.html#43-what-happens-when-an-interrupt-occurs","title":"4.3 What Happens When an Interrupt Occurs?","text":"<ul> <li>Control goes to an Interrupt Service Routine (ISR).</li> <li>ISRs are stored in the interrupt vector, which tells the OS which routine to run.</li> <li>The OS first saves the CPU state (registers + program counter) so the program can continue later.</li> <li>The OS is interrupt-driven \u2013 it reacts to events (interrupts) as they happen.</li> </ul> <p>The OS doesn't just run in a fixed sequence. Instead, it waits for events, like a device finishing a task or a program needing service. When an event (called an interrupt) happens, the OS immediately stops what it was doing and handles that event. Afterward, it goes back to what it was doing.</p>"},{"location":"operating-system/index.html#44-what-is-a-trap","title":"4.4 What is a Trap?","text":"<ul> <li>A trap (or exception) is a software-generated interrupt.</li> <li> It can be caused by: <p>An error (e.g., divide by zero)</p> <p>A request (e.g., a system call)</p> </li> </ul>"},{"location":"operating-system/index.html#5-io-structure","title":"5. I/O Structure","text":""},{"location":"operating-system/index.html#51-types-of-io","title":"5.1 Types of I/O","text":"Type How it Works Pros/Cons Synchronous CPU waits until I/O finishes Simple but inefficient (CPU idle) Asynchronous CPU starts I/O and continues other tasks Efficient but more complex"},{"location":"operating-system/index.html#6-storage-structure","title":"6. Storage Structure","text":""},{"location":"operating-system/index.html#61-main-types-of-storage","title":"6.1 Main Types of Storage","text":"<ul> <li>Main Memory \u2013 Directly accessed by the CPU.</li> </ul> <ul> <li>Usually volatile (loses data when power is off).</li> <li>Example: <code>DRAM</code>.</li> </ul> <ul> <li>Secondary Storage \u2013 Large, non-volatile storage.</li> </ul> <ul> <li>Keeps data even when power is off.</li> <li>Examples: <code>HDD</code>, <code>SSD</code>.</li> </ul>"},{"location":"operating-system/index.html#62-why-storage-is-a-hierarchy","title":"6.2 Why Storage is a Hierarchy","text":"<ul> <li>Storage is arranged by speed, cost, and volatility. <ul> <li>Top: fast, expensive, small (<code>registers</code>, <code>cache</code>).</li> <li>Bottom: slower, cheaper, larger (<code>HDDs</code>, <code>magnetic tapes</code>).</li> </ul> </li> </ul>"},{"location":"operating-system/index.html#63-what-is-caching","title":"6.3 What is Caching?","text":"<ul> <li>Caching means copying data from slower storage to faster storage.</li> <li>The faster storage is the cache.</li> <li>When data is needed, the system first checks the cache:</li> <li>Hit \u2013 data is found in cache (fast).</li> <li>Miss \u2013 data not in cache, so it\u2019s copied from slower storage.</li> <li>The cache is smaller than the main storage, so the OS must decide which old data to replace with new data.</li> </ul>"},{"location":"operating-system/index.html#64-what-is-cache-coherency","title":"6.4 What is Cache Coherency?","text":"<ul> <li>In multitasking or multi-CPU systems, the same data can exist in many places:</li> <li>Cache, main memory, or registers.</li> <li>The challenge is keeping all copies up to date.</li> <li>If data changes in the cache, other copies might be outdated.</li> <li>In multi-CPU systems, hardware ensures all CPUs see the latest value.</li> <li>In distributed systems, the problem is harder since many computers may hold copies.</li> </ul>"},{"location":"operating-system/index.html#7-how-does-a-computer-start-up","title":"7. How Does a Computer Start Up?","text":"<p>The computer starts up in a specific order:</p> <ol> <li>On power-on or reboot, a bootstrap program runs.</li> <li>Stored in firmware (ROM/EPROM) or in modern PCs in the SSD.</li> <li>The bootstrap initializes the system.</li> <li>Then it loads the OS kernel into <code>memory</code> and starts it.</li> </ol>"},{"location":"operating-system/index.html#how-does-the-os-work-after-start","title":"How Does the OS Work After Start?","text":"<ul> <li>The kernel starts system services called daemons or services in <code>Windows</code>.</li> <li>The OS becomes interrupt-driven: <ul> <li>Handles hardware interrupts (e.g., file ready).</li> <li>Handles software interrupts (e.g., program error).</li> </ul> </li> </ul>"},{"location":"operating-system/index.html#71-what-is-direct-memory-access-dma","title":"7.1 What is Direct Memory Access (DMA)?","text":"<ul> <li>DMA is used by fast I/O devices to move data quickly.</li> <li>The device controller transfers data blocks directly between main memory and the device.</li> <li>The CPU is only interrupted once per block, not for every byte.</li> <li>This makes the system more efficient, since the CPU can do other work.</li> </ul> <p>Example: Copying a file from disk to <code>RAM</code> with <code>DMA</code></p> <ol> <li> <p>The CPU tells the DMA controller:</p> </li> <li> <p>where the data should go in main memory</p> </li> <li>how much data to transfer</li> <li> <p>which device (e.g., disk).</p> </li> <li> <p>The DMA controller takes over and moves the data directly from the disk to RAM, without bothering the CPU for each byte.</p> </li> <li> <p>When the transfer is complete, the DMA controller sends one interrupt to the CPU to say:</p> </li> <li>\"The whole block is done.\"</li> </ol> <code>Result</code>: The CPU is free to run other programs while the transfer happens."},{"location":"operating-system/index.html#72-data-structures-used-by-the-kernel","title":"7.2 Data Structures Used by the Kernel","text":"Data Structure Description Example / Note Linked Lists Items connected in a chain Can be singly, doubly, or circular Binary Search Trees Fast way to find data Like \"20 questions\" \u2013 each step narrows choices Hash Maps Store data with a key for quick lookup Like a phone book Bitmaps Series of 1s and 0s showing if something is used or free \"1\" = used, \"0\" = free"},{"location":"operating-system/index.html#8-operating-system-operations","title":"8. Operating System Operations","text":""},{"location":"operating-system/index.html#what-is-dual-mode-operation","title":"What is Dual-mode Operation?","text":"<p>Dual-mode operation helps the OS protect itself and other system parts by having two modes: user mode and kernel mode.</p> <ul> <li>User mode:</li> </ul> <ul> <li>Where user programs run.</li> </ul> <ul> <li>Limited privileges, cannot access hardware directly.</li> </ul> <ul> <li>Like a passenger in a car (can use radio or window buttons).</li> </ul> <ul> <li>Kernel mode:</li> </ul> <ul> <li>Where the OS core runs.</li> </ul> <ul> <li>Full privileges, can access all hardware.</li> </ul> <ul> <li>Like the driver of the car (controls steering and engine).</li> </ul> <ul> <li>A mode bit shows which mode the system is in.</li> <li>To do something needing kernel privileges (like accessing a file), a program uses a system call.</li> <li>Privileged instructions can only run in kernel mode to prevent user programs from misusing hardware.</li> </ul>"},{"location":"operating-system/index.html#how-do-we-guarantee-that-user-does-not-explicitly-set-the-mode-bit-to-kernel","title":"How do we guarantee that user does not explicitly set the mode bit to \u201ckernel\u201d?","text":"<ul> <li>System call changes mode to kernel, return from call resets it to user</li> </ul> <pre><code>user mode \u2192 system call \u2192 kernel mode \u2192 return \u2192 user mode\n</code></pre>"},{"location":"operating-system/index.html#81-resource-management-by-the-os","title":"8.1 Resource Management by the OS","text":"Resource Area What It Does Process Management Creates/deletes processes, handles synchronization and communication between them Memory Management Tracks main memory usage, allocates/deallocates memory, moves programs in/out File-System Management Manages files/directories, access control, maps files to secondary storage Mass-Storage Management Handles large storage devices (disks), manages free space, schedules disk access I/O Subsystem Hides hardware details, handles buffering, caching, and spooling"},{"location":"operating-system/index.html#9-main-types-of-os-structures","title":"9. Main Types of OS Structures","text":"MS-DOSUNIXLayered ApproachMicro Structure Type Description Example Simple Structure OS has little structure; all functions in one place; hard to manage or extend MS-DOS Monolithic Structure Large kernel containing all OS functions (file system, CPU scheduling, memory management) Original UNIX Microkernel Structure Non-essential parts moved to user space; kernel communicates via message passing; more reliable and secure but can be slower Mach Hybrid Systems Combines approaches; e.g., Linux has a monolithic core plus loadable modules, Windows is mostly monolithic with some microkernel ideas Linux, Windows Layered Approach OS divided into layers; each layer uses services of the layer below; hardware is at the bottom \u2013"},{"location":"operating-system/index.html#hybrid-systems","title":"Hybrid Systems","text":"LinuxWindowsMacAndroid OS / Platform Structure Type Notes / Features Linux &amp; Solaris Monolithic + Modular - Kernel runs in kernel address space.- Uses loadable kernel modules (LKMs), so new functionality can be added without rebooting.- Example: plugging in a USB device triggers the kernel to load the required driver. Windows Mostly Monolithic with Microkernel ideas - Has a central Executive layer in the kernel.- Separate user-mode subsystems provide different interfaces.- Combines speed of monolithic design with some microkernel features for modularity and security. Apple (macOS &amp; iOS) Hybrid + Layered - Kernel environment is Darwin, a hybrid of Mach microkernel and BSD Unix.- Supports kernel extensions for adding modules dynamically.- Uses layers for user experience, application frameworks, and core OS services. Android Modified Linux Kernel - Built on a Linux kernel modified for mobile devices.- Handles process, memory, device drivers, and power management.- Uses the ART virtual machine for running Java-based apps.- Core libraries provide Android-specific services to apps."},{"location":"operating-system/index.html#10-computer-system-environments","title":"10. Computer System Environments","text":""},{"location":"operating-system/index.html#101-types-of-operating-systems","title":"10.1 Types of Operating Systems","text":"OS Type Description Examples / Notes Traditional Stand-alone, general-purpose computers. Less common today as most systems connect to the internet Desktop PCs Virtualization Allows one OS to run applications or other OSes inside it. Uses a Virtual Machine Manager (VMM) Running Windows on Mac, data centers Mobile For smartphones/tablets. Optimized for limited resources, battery life, and usability. Supports extra features like GPS and gyroscope Android, iOS Client-Server Many clients request services from a central server. The server provides resources like files or databases Company networks, web servers Peer-to-Peer (P2P) Distributed system with no fixed client/server roles. All computers are peers File-sharing networks, Skype Cloud Computing Services (compute, storage) delivered over a network. Uses virtual machines. Types: public cloud, private cloud; Services: SaaS, PaaS, IaaS AWS, Google Cloud Real-time Embedded Systems Special-purpose computers with strict time constraints; tasks must complete on time Car controllers, industrial machines"},{"location":"operating-system/xv6/index.html","title":"xv6 Kernel Overview","text":"<p>xv6 is a modern re-implementation of Unix Version 6 (v6) for educational purposes. It runs on x86 architecture and demonstrates how an operating system manages hardware and software resources.</p>"},{"location":"operating-system/xv6/index.html#0-history-and-purpose","title":"0. History and Purpose","text":"<ul> <li>Created by: <code>MIT</code> (Massachusetts Institute of Technology)</li> <li>First release: 2006 (as a teaching OS)</li> <li>Why: To help students understand the inner workings of Unix and operating system concepts with a small, simple, and readable codebase</li> <li>Repository: xv6-public on GitHub</li> <li>Target audience: Students and OS enthusiasts</li> </ul>"},{"location":"operating-system/xv6/index.html#1-what-is-xv6","title":"1. What is xv6?","text":"<ul> <li>xv6 is a simple, teaching OS for understanding kernel concepts</li> <li>Implements basic features of Unix: process management, file systems, system calls, and more</li> <li>Runs on modern x86 hardware or via emulators like QEMU</li> </ul>"},{"location":"operating-system/xv6/index.html#2-xv6-file-structure","title":"2. xv6 File Structure","text":""},{"location":"operating-system/xv6/index.html#21-core-components","title":"2.1 Core Components","text":"Component Description kernel Main OS code, manages CPU, memory, devices, and system calls user programs Sample programs for testing (e.g., <code>ls</code>, <code>cat</code>) Makefile Builds the OS and compiles programs bootblock Starts the OS at boot, loads kernel into memory fs.img File system image containing files and directories"},{"location":"operating-system/xv6/index.html#3-how-xv6-works","title":"3. How xv6 Works","text":"<pre><code>[ Bootloader ]\n     |\n     | Loads kernel\n     v\n[ Kernel ]\n     |\n     | Initializes hardware, memory, and devices\n     v\n[ System Calls ]\n     |\n     | Interfaces with user programs\n     v\n[ User Programs ]\n</code></pre>"},{"location":"operating-system/xv6/important1.html","title":"xv6 Kernel Setup on Linux","text":"<p>This guide explains how to install, build, and run the xv6 operating system kernel on various Linux distributions.</p>"},{"location":"operating-system/xv6/important1.html#1-install-required-packages","title":"1. Install Required Packages","text":"<p>To build and run xv6, you need the following tools:</p> <ul> <li><code>git</code> \u2192 To clone the xv6 repository</li> <li><code>base-devel</code> \u2192 Compiler tools (<code>gcc</code>, <code>make</code>, <code>binutils</code>, etc.)</li> <li><code>qemu</code> \u2192 Emulator to run xv6</li> <li><code>i386-elf-gcc</code> \u2192 Cross-compiler for xv6</li> </ul>"},{"location":"operating-system/xv6/important1.html#11-on-arch-linux","title":"1.1 On Arch Linux","text":"<p>If you are using Arch Linux, install the packages using <code>yay</code>:</p> <pre><code>yay -S git base-devel qemu i386-elf-gcc\n</code></pre> <p>these command are tested and 100% working...</p>"},{"location":"operating-system/xv6/important1.html#12-on-other-linux-distributions","title":"1.2 On Other Linux Distributions.","text":"<ul> <li>for <code>ubuntu</code> :</li> </ul> <pre><code>sudo apt update\nsudo apt install -y build-essential qemu-system-x86 git gcc-multilib\n</code></pre> <ul> <li>for <code>debian</code> :</li> </ul> <pre><code>sudo apt update\nsudo apt install -y build-essential qemu-system-x86 git gcc-multilib\n</code></pre> <ul> <li>for <code>fedora</code> :</li> </ul> <pre><code>sudo dnf groupinstall \"Development Tools\"\nsudo dnf install -y qemu-system-x86 git gcc gcc-c++\n</code></pre> <p><code>\u26a0\ufe0f</code> Note: I have not personally tested the installation on Ubuntu, Debian, or Fedora. Some package names or groups might differ, so if you encounter errors or warnings, please check the official documentation/wiki for your distribution.</p>"},{"location":"operating-system/xv6/important1.html#2-clone-the-xv6-repository","title":"2. Clone the xv6 Repository","text":"<ul> <li>open ur terminal and run the following commands :</li> </ul> <pre><code>git clone https://github.com/mit-pdos/xv6-public.git\n\ncd xv6-public\n</code></pre>"},{"location":"operating-system/xv6/important1.html#3-update-the-makefile","title":"3. Update the Makefile","text":"<ul> <li>Open the Makefile in any editor (e.g., <code>vim</code>, <code>nano</code> , <code>vscode</code> ..)</li> </ul>"},{"location":"operating-system/xv6/important1.html#31-set-the-tool-prefix","title":"3.1 Set the Tool Prefix","text":"<ul> <li>Search for: <code>TOOLPREFIX =</code> Change it to:</li> </ul> <pre><code>TOOLPREFIX = i386-elf-\n</code></pre>"},{"location":"operating-system/xv6/important1.html#32-update-compiler-flags","title":"3.2 Update Compiler Flags","text":"<ul> <li>Search for: <code>CFLAGS =</code> Change it to:</li> </ul> <pre><code>CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer\n</code></pre> <p>This prevents the Makefile from stopping the <code>build</code> when warnings occur.</p>"},{"location":"operating-system/xv6/important1.html#33-build-xv6","title":"3.3 Build xv6","text":"<ul> <li>run the following command :</li> </ul> <pre><code>make\n</code></pre>"},{"location":"operating-system/xv6/important1.html#34-run-xv6-in-qemu","title":"3.4 Run xv6 in QEMU","text":"<ul> <li>run :</li> </ul> <pre><code>make qemu\n</code></pre> <p>or u can run</p> <pre><code>make qemu-nox\n</code></pre> <p>Launches QEMU entirely in the terminal</p>"},{"location":"operating-system/xv6/important1.html#4-exiting-qemu","title":"4. Exiting QEMU","text":"<p>Use <code>Ctrl-a x</code> to <code>exit</code> QEMU.</p>"}]}